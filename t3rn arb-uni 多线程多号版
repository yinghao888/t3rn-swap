from web3 import Web3
import time
from typing import List, Dict
import threading

# === 关注作者推特@hao3313076获取最新脚本 ===

# === 可自定义参数 ===
ACCOUNTS = [
    {"private_key": "0x123456789abcdef...", "name": "账户1"},
    {"private_key": "0xabcdef123456789...", "name": "账户2"},
    # 添加更多账户...
]
AMOUNT_ETH = 1  # 每次跨链金额（单位：ETH）

# 优化的 RPC 地址
OP_RPC_URL = "https://go.getblock.io/6a87203a95204612ad1a8e38e182055b"
ARB_RPC_URL = "https://go.getblock.io/868382d71fcc4169bf248df24ffbfb83"

# 合约地址
OP_CONTRACT_ADDRESS = "0xb6Def636914Ae60173d9007E732684a9eEDEF26E"  # OP -> ARB
ARB_CONTRACT_ADDRESS = "0x22B65d0B9b59af4D3Ed59F18b9Ad53f5F4908B54"  # ARB -> OP

# 数据模板
OP_DATA_TEMPLATE = "0x56591d59617262740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}0000000000000000000000000000000000000000000000000de08e51ef953b80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000"
ARB_DATA_TEMPLATE = "0x56591d596f707374000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}0000000000000000000000000000000000000000000000000de06a4dde82f300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000"

# ANSI 颜色代码
GREEN = "\033[92m"
YELLOW = "\033[93m"
RED = "\033[91m"
BLUE = "\033[94m"
RESET = "\033[0m"

# 全局计数器
success_count = 0
total_success_count = 0
minute_success_count = 0
last_minute_time = time.time()
start_time = time.time()

# 账户初始化
accounts: List[Dict] = []
for acc in ACCOUNTS:
    account = Web3(Web3.HTTPProvider(OP_RPC_URL)).eth.account.from_key(acc["private_key"])
    address = account.address[2:]  # 去掉 "0x"
    accounts.append({
        "name": acc["name"],
        "private_key": acc["private_key"],
        "address": account.address,
        "address_no_prefix": address,
        "op_data": OP_DATA_TEMPLATE.format(address=address),  # OP -> ARB
        "arb_data": ARB_DATA_TEMPLATE.format(address=address)  # ARB -> OP
    })

# 将秒数转换为可读的时间格式
def format_time(seconds: float) -> str:
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    secs = int(seconds % 60)
    return f"{hours}小时 {minutes}分钟 {secs}秒"

# 60秒统计函数
def report_worker():
    global success_count, total_success_count, minute_success_count, last_minute_time, start_time
    while True:
        current_time = time.time()
        if current_time - last_minute_time >= 60:
            runtime = current_time - start_time
            print(f"\n{YELLOW}=================================================={RESET}")
            print(f"{GREEN} 60秒交易统计 {RESET}")
            print(f"{BLUE}过去60秒完成: {minute_success_count} 笔交易 {RESET}")
            print(f"{BLUE}累计完成总数: {total_success_count} 笔交易 {RESET}")
            print(f"{BLUE}累计运行时间: {format_time(runtime)} {RESET}")
            print(f"{BLUE}关注作者推特@hao3313076获取最新脚本 {RESET}")
            print(f"{YELLOW}=================================================={RESET}\n")
            minute_success_count = 0
            last_minute_time = current_time
        time.sleep(1)

# 从 OP 跨到 ARB
def bridge_op_to_arb(account_info: Dict, amount_eth: float, w3_op: Web3) -> bool:
    global success_count, total_success_count, minute_success_count
    try:
        amount_wei = w3_op.to_wei(amount_eth, 'ether')
        balance_op = w3_op.eth.get_balance(account_info["address"])
        gas_price = w3_op.to_wei(0.05, 'gwei')  # 优化 gas 价格
        gas_limit = 200000  # 降低 gas limit 以提高速度
        estimated_gas_cost = gas_price * gas_limit
        total_cost = amount_wei + estimated_gas_cost
        print(f" {account_info['name']} OP 余额: {w3_op.from_wei(balance_op, 'ether')} ETH")
        if balance_op < total_cost:
            print(f" {account_info['name']} OP 余额不足，需要 {w3_op.from_wei(total_cost, 'ether')} ETH")
            return False
        nonce = w3_op.eth.get_transaction_count(account_info["address"])
        tx = {
            'from': account_info["address"],
            'to': OP_CONTRACT_ADDRESS,
            'value': amount_wei,
            'nonce': nonce,
            'gas': gas_limit,
            'gasPrice': gas_price,
            'chainId': 11155420,
            'data': account_info["op_data"]
        }
        print(f" {account_info['name']} OP -> ARB: 发送 {amount_eth} ETH")
        signed_tx = w3_op.eth.account.sign_transaction(tx, account_info["private_key"])
        tx_hash = w3_op.eth.send_raw_transaction(signed_tx.raw_transaction)
        print(f" {account_info['name']} OP -> ARB 交易哈希: {w3_op.to_hex(tx_hash)}")
        w3_op.eth.wait_for_transaction_receipt(tx_hash)
        success_count += 1
        total_success_count += 1
        minute_success_count += 1
        return True
    except Exception as e:
        print(f" {account_info['name']} OP -> ARB 失败: {e}")
        return False

# 从 ARB 跨回 OP
def bridge_arb_to_op(account_info: Dict, amount_eth: float, w3_arb: Web3) -> bool:
    global success_count, total_success_count, minute_success_count
    try:
        amount_wei = w3_arb.to_wei(amount_eth, 'ether')
        balance_arb = w3_arb.eth.get_balance(account_info["address"])
        gas_price = w3_arb.to_wei(0.05, 'gwei')  # 优化 gas 价格
        gas_limit = 300000  # 降低 gas limit 以提高速度
        estimated_gas_cost = gas_price * gas_limit
        total_cost = amount_wei + estimated_gas_cost
        print(f" {account_info['name']} ARB 余额: {w3_arb.from_wei(balance_arb, 'ether')} ETH")
        if balance_arb < total_cost:
            print(f" {account_info['name']} ARB 余额不足，需要 {w3_arb.from_wei(total_cost, 'ether')} ETH")
            return False
        nonce = w3_arb.eth.get_transaction_count(account_info["address"])
        tx = {
            'from': account_info["address"],
            'to': ARB_CONTRACT_ADDRESS,
            'value': amount_wei,
            'nonce': nonce,
            'gas': gas_limit,
            'gasPrice': gas_price,
            'chainId': 421614,
            'data': account_info["arb_data"]
        }
        print(f" {account_info['name']} ARB -> OP: 发送 {amount_eth} ETH")
        signed_tx = w3_arb.eth.account.sign_transaction(tx, account_info["private_key"])
        tx_hash = w3_arb.eth.send_raw_transaction(signed_tx.raw_transaction)
        print(f" {account_info['name']} ARB -> OP 交易哈希: {w3_arb.to_hex(tx_hash)}")
        w3_arb.eth.wait_for_transaction_receipt(tx_hash)
        success_count += 1
        total_success_count += 1
        minute_success_count += 1
        return True
    except Exception as e:
        print(f" {account_info['name']} ARB -> OP 失败: {e}")
        return False

# 主执行逻辑（无限循环）
def run_bridge():
    global start_time
    start_time = time.time()
    print(f" 开始为 {len(accounts)} 个账户执行 OP-ARB 无限循环跨链，每次 {AMOUNT_ETH} ETH ")

    # 创建 Web3 实例
    w3_op = Web3(Web3.HTTPProvider(OP_RPC_URL, request_kwargs={'timeout': 30}))
    w3_arb = Web3(Web3.HTTPProvider(ARB_RPC_URL, request_kwargs={'timeout': 30}))

    if not w3_op.is_connected():
        print(f"{RED} 无法连接到 OP 测试网，程序退出 {RESET}")
        return
    if not w3_arb.is_connected():
        print(f"{RED} 无法连接到 ARB 测试网，程序退出 {RESET}")
        return
    print(f"{GREEN} 成功连接到 OP 和 ARB 测试网 {RESET}")

    # 启动报告线程
    report_thread = threading.Thread(target=report_worker, daemon=True)
    report_thread.start()

    while True:  # 无限循环
        for account_info in accounts:
            print(f"{BLUE}👤 处理账户: {account_info['name']} 🌟{RESET}")
            
            # OP -> ARB
            op_success = bridge_op_to_arb(account_info, AMOUNT_ETH, w3_op)
            if not op_success:
                print(f"⚠️ {account_info['name']} OP -> ARB 失败，但将继续尝试 ARB -> OP 😅")
            
            # ARB -> OP
            arb_success = bridge_arb_to_op(account_info, AMOUNT_ETH, w3_arb)
            if not arb_success:
                print(f"⚠️ {account_info['name']} ARB -> OP 失败，继续下一账户 😅")

if __name__ == "__main__":
    run_bridge()

# === 关注作者推特@hao3313076获取最新脚本 ===
