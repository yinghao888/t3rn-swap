from web3 import Web3
import time
from typing import List, Dict
import threading

# === 可自定义参数 ===
ACCOUNTS = [
    {"private_key": "", "name": "账户1"},
    {"private_key": "", "name": "账户2"},
    {"private_key": "", "name": "账户3"},
    {"private_key": "", "name": "账户4"},
]
AMOUNT_ETH = 3.5  # 每次跨链金额（单位：ETH）

# RPC 地址
UNI_RPC_URL = "https://unichain-sepolia.drpc.org"
ARB_RPC_URL = "https://sepolia-rollup.arbitrum.io/rpc"

# 合约地址
ARB_CONTRACT_ADDRESS = "0x22B65d0B9b59af4D3Ed59F18b9Ad53f5F4908B54"  # ARB -> UNI
UNI_CONTRACT_ADDRESS = "0x1cEAb5967E5f078Fa0FEC3DFfD0394Af1fEeBCC9"  # UNI -> ARB

# 数据模板
UNI_DATA_TEMPLATE = "0x56591d5961726274000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}0000000000000000000000000000000000000000000000003092467525c6a05c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030927f74c9de0000"
ARB_DATA_TEMPLATE = "0x56591d59756e6974000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}00000000000000000000000000000000000000000000000030924a11f45534fa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030927f74c9de0000"

# ANSI 颜色代码
GREEN = "\033[92m"
YELLOW = "\033[93m"
RED = "\033[91m"
BLUE = "\033[94m"
RESET = "\033[0m"

# 全局计数器
success_count = 0
total_success_count = 0
minute_success_count = 0
last_minute_time = time.time()
start_time = time.time()  # 程序开始时间

# 账户初始化
accounts: List[Dict] = []
for acc in ACCOUNTS:
    account = Web3(Web3.HTTPProvider(UNI_RPC_URL)).eth.account.from_key(acc["private_key"])
    address = account.address[2:]  # 去掉 "0x"
    accounts.append({
        "name": acc["name"],
        "private_key": acc["private_key"],
        "address": account.address,
        "address_no_prefix": address,
        "uni_data": UNI_DATA_TEMPLATE.format(address=address),  # UNI -> ARB
        "arb_data": ARB_DATA_TEMPLATE.format(address=address)   # ARB -> UNI
    })

# 将秒数转换为可读的时间格式
def format_time(seconds: float) -> str:
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    secs = int(seconds % 60)
    return f"{hours}小时 {minutes}分钟 {secs}秒"

# 分钟统计函数
def report_worker():
    global success_count, total_success_count, minute_success_count, last_minute_time, start_time
    while True:
        current_time = time.time()
        # 每分钟统计
        if current_time - last_minute_time >= 60:
            runtime = current_time - start_time
            print(f"\n{YELLOW}=================================================={RESET}")
            print(f"{GREEN}📊📊📊 分钟交易统计 📊📊📊{RESET}")
            print(f"{BLUE}上一分钟完成: {minute_success_count} 笔交易 🚀{RESET}")
            print(f"{BLUE}累计完成总数: {total_success_count} 笔交易 🌟{RESET}")
            print(f"{BLUE}累计运行时间: {format_time(runtime)} ⏰{RESET}")
            print(f"{YELLOW}=================================================={RESET}\n")
            minute_success_count = 0
            last_minute_time = current_time
        time.sleep(1)

# 从 UNI 跨到 ARB
def bridge_uni_to_arb(account_info: Dict, amount_eth: float, w3_uni: Web3) -> bool:
    global success_count, total_success_count, minute_success_count
    try:
        amount_wei = w3_uni.to_wei(amount_eth, 'ether')
        balance_uni = w3_uni.eth.get_balance(account_info["address"])
        gas_price = w3_uni.to_wei(1.6, 'gwei')
        gas_limit = 400000
        estimated_gas_cost = gas_price * gas_limit
        total_cost = amount_wei + estimated_gas_cost
        print(f"💰 {account_info['name']} UNI 余额: {w3_uni.from_wei(balance_uni, 'ether')} ETH")
        print(f"⛽ 预估 Gas 费用: {w3_uni.from_wei(estimated_gas_cost, 'ether')} ETH")
        print(f"💸 总费用 (金额 + Gas): {w3_uni.from_wei(total_cost, 'ether')} ETH")
        if balance_uni < total_cost:
            print(f"⚠️ {account_info['name']} UNI 余额不足，需要 {w3_uni.from_wei(total_cost, 'ether')} ETH，实际余额 {w3_uni.from_wei(balance_uni, 'ether')} ETH 😢")
            return False
        nonce = w3_uni.eth.get_transaction_count(account_info["address"])
        tx = {
            'from': account_info["address"],
            'to': UNI_CONTRACT_ADDRESS,
            'value': amount_wei,
            'nonce': nonce,
            'gas': gas_limit,
            'gasPrice': gas_price,
            'chainId': 1301,
            'data': account_info["uni_data"]
        }
        print(f"🚀 {account_info['name']} UNI -> ARB: 发送 {amount_eth} ETH")
        signed_tx = w3_uni.eth.account.sign_transaction(tx, account_info["private_key"])
        raw_tx = signed_tx.raw_transaction if hasattr(signed_tx, 'raw_transaction') else signed_tx['raw']
        tx_hash = w3_uni.eth.send_raw_transaction(raw_tx)
        print(f"📜 {account_info['name']} UNI -> ARB 交易哈希: {w3_uni.to_hex(tx_hash)}")
        tx_receipt = w3_uni.eth.wait_for_transaction_receipt(tx_hash)
        print(f"✅ {account_info['name']} 交易确认，区块号: {tx_receipt.blockNumber} 🎉")
        success_count += 1
        total_success_count += 1
        minute_success_count += 1
        return True
    except Exception as e:
        print(f"❌ {account_info['name']} UNI -> ARB 失败: {e} 😭")
        return False

# 从 ARB 跨回 UNI
def bridge_arb_to_uni(account_info: Dict, amount_eth: float, w3_arb: Web3) -> bool:
    global success_count, total_success_count, minute_success_count
    try:
        amount_wei = w3_arb.to_wei(amount_eth, 'ether')
        balance_arb = w3_arb.eth.get_balance(account_info["address"])
        gas_price = w3_arb.to_wei(0.1, 'gwei')
        gas_limit = 400000
        estimated_gas_cost = gas_price * gas_limit
        total_cost = amount_wei + estimated_gas_cost
        print(f"💰 {account_info['name']} ARB 余额: {w3_arb.from_wei(balance_arb, 'ether')} ETH")
        print(f"⛽ 预估 Gas 费用: {w3_arb.from_wei(estimated_gas_cost, 'ether')} ETH")
        print(f"💸 总费用 (金额 + Gas): {w3_arb.from_wei(total_cost, 'ether')} ETH")
        if balance_arb < total_cost:
            print(f"⚠️ {account_info['name']} ARB 余额不足，需要 {w3_arb.from_wei(total_cost, 'ether')} ETH，实际余额 {w3_arb.from_wei(balance_arb, 'ether')} ETH 😢")
            return False
        nonce = w3_arb.eth.get_transaction_count(account_info["address"])
        tx = {
            'from': account_info["address"],
            'to': ARB_CONTRACT_ADDRESS,
            'value': amount_wei,
            'nonce': nonce,
            'gas': gas_limit,
            'gasPrice': gas_price,
            'chainId': 421614,
            'data': account_info["arb_data"]
        }
        print(f"🚀 {account_info['name']} ARB -> UNI: 发送 {amount_eth} ETH")
        signed_tx = w3_arb.eth.account.sign_transaction(tx, account_info["private_key"])
        raw_tx = signed_tx.raw_transaction if hasattr(signed_tx, 'raw_transaction') else signed_tx['raw']
        tx_hash = w3_arb.eth.send_raw_transaction(raw_tx)
        print(f"📜 {account_info['name']} ARB -> UNI 交易哈希: {w3_arb.to_hex(tx_hash)}")
        tx_receipt = w3_arb.eth.wait_for_transaction_receipt(tx_hash)
        print(f"✅ {account_info['name']} 交易确认，区块号: {tx_receipt.blockNumber} 🎉")
        success_count += 1
        total_success_count += 1
        minute_success_count += 1
        return True
    except Exception as e:
        print(f"❌ {account_info['name']} ARB -> UNI 失败: {e} 😭")
        return False

# 主执行逻辑（无限循环）
def run_bridge():
    global start_time
    start_time = time.time()  # 重置开始时间
    print(f"🌈 开始为 {len(accounts)} 个账户执行 UNI-ARB 无限循环跨链，每次 {AMOUNT_ETH} ETH 🎉")
    
    # 创建 Web3 实例
    w3_uni = Web3(Web3.HTTPProvider(UNI_RPC_URL, request_kwargs={'timeout': 30}))
    w3_arb = Web3(Web3.HTTPProvider(ARB_RPC_URL, request_kwargs={'timeout': 30}))
    
    if not w3_uni.is_connected():
        print(f"{RED}❌ 无法连接到 UNI 测试网，程序退出 😢{RESET}")
        return
    if not w3_arb.is_connected():
        print(f"{RED}❌ 无法连接到 ARB 测试网，程序退出 😢{RESET}")
        return
    print(f"{GREEN}✅ 成功连接到 UNI 和 ARB 测试网 🌟{RESET}")

    # 启动报告线程
    report_thread = threading.Thread(target=report_worker, daemon=True)
    report_thread.start()

    round_count = 0
    while True:  # 外层无限循环（轮次）
        round_count += 1
        print(f"\n{YELLOW}✨ === 第 {round_count} 轮跨链开始 === ✨{RESET}")
        
        while True:  # 内层无限循环（代替 TIMES）
            for account_info in accounts:
                print(f"{BLUE}👤 处理账户: {account_info['name']} 🌟{RESET}")
                
                # UNI -> ARB
                uni_success = bridge_uni_to_arb(account_info, AMOUNT_ETH, w3_uni)
                if not uni_success:
                    print(f"⚠️ {account_info['name']} UNI -> ARB 失败，但将继续尝试 ARB -> UNI 😅")
                
                # 无论 UNI 是否成功，都尝试 ARB -> UNI
                arb_success = bridge_arb_to_uni(account_info, AMOUNT_ETH, w3_arb)
                if not arb_success:
                    print(f"⚠️ {account_info['name']} ARB -> UNI 失败，继续下一账户 😅")

if __name__ == "__main__":
    run_bridge()
