from web3 import Web3
import time
import random

# 内置私钥列表 - 不带0x前缀，直接填写在这里
PRIVATE_KEYS = [
    "",
    ""
]

# 可自定义参数
AMOUNT_ETH = 1  # 每次跨链的ETH数量，改为1 ETH

# RPC 端点
UNI_RPC_URL = "https://unichain-sepolia.drpc.org"
ARB_RPC_URL = "https://sepolia-rollup.arbitrum.io/rpc"

# 跨链合约地址
UNI_TO_ARB_CONTRACT = "0x1cEAb5967E5f078Fa0FEC3DFfD0394Af1fEeBCC9"
ARB_TO_UNI_CONTRACT = "0x22B65d0B9b59af4D3Ed59F18b9Ad53f5F4908B54"

# 带占位符的跨链数据模板
UNI_TO_ARB_BASE_DATA = "0x56591d5961726274000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}0000000000000000000000000000000000000000000000000de0a51bbebb0e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000"
ARB_TO_UNI_BASE_DATA = "0x56591d59756e6974000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}0000000000000000000000000000000000000000000000000de06a4dded38400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000"

# 初始化 Web3 连接
w3_uni = Web3(Web3.HTTPProvider(UNI_RPC_URL))
w3_arb = Web3(Web3.HTTPProvider(ARB_RPC_URL))

# 检查网络连接
if not w3_uni.is_connected():
    raise Exception("无法连接到 UNI 测试网")
if not w3_arb.is_connected():
    raise Exception("无法连接到 ARB 测试网")

# 从 UNI 到 ARB 的跨链函数
def bridge_uni_to_arb(amount_eth, account):
    try:
        amount_wei = w3_uni.to_wei(amount_eth, 'ether')
        nonce = w3_uni.eth.get_transaction_count(account.address)
        data = UNI_TO_ARB_BASE_DATA.format(address=account.address[2:])  # 动态插入地址
        
        tx = {
            'from': account.address,
            'to': UNI_TO_ARB_CONTRACT,
            'value': amount_wei,
            'nonce': nonce,
            'gas': 400000,
            'gasPrice': w3_uni.to_wei(0.16, 'gwei'),
            'chainId': 1301,
            'data': data
        }
        print(f"UNI -> ARB: 发送 {amount_eth} ETH 从 {account.address}")
        signed_tx = w3_uni.eth.account.sign_transaction(tx, account.key)
        tx_hash = w3_uni.eth.send_raw_transaction(signed_tx.raw_transaction)
        print(f"UNI -> ARB 交易已发送，交易哈希: {w3_uni.to_hex(tx_hash)}")
        tx_receipt = w3_uni.eth.wait_for_transaction_receipt(tx_hash)
        print(f"交易已确认，区块号: {tx_receipt.blockNumber}")
        return True
    except Exception as e:
        print(f"UNI -> ARB 跨链失败，错误: {e}")
        return False

# 从 ARB 到 UNI 的跨链函数
def bridge_arb_to_uni(amount_eth, account):
    try:
        amount_wei = w3_arb.to_wei(amount_eth, 'ether')
        nonce = w3_arb.eth.get_transaction_count(account.address)
        data = ARB_TO_UNI_BASE_DATA.format(address=account.address[2:])  # 动态插入地址
        
        tx = {
            'from': account.address,
            'to': ARB_TO_UNI_CONTRACT,
            'value': amount_wei,
            'nonce': nonce,
            'gas': 400000,
            'gasPrice': w3_arb.to_wei(0.1, 'gwei'),
            'chainId': 421614,
            'data': data  # 修正语法错误，确保每个键值对后有逗号
        }
        print(f"ARB -> UNI: 发送 {amount_eth} ETH 从 {account.address}")
        signed_tx = w3_arb.eth.account.sign_transaction(tx, account.key)
        tx_hash = w3_arb.eth.send_raw_transaction(signed_tx.raw_transaction)
        print(f"ARB -> UNI 交易已发送，交易哈希: {w3_arb.to_hex(tx_hash)}")
        tx_receipt = w3_arb.eth.wait_for_transaction_receipt(tx_hash)
        print(f"交易已确认，区块号: {tx_receipt.blockNumber}")
        return True
    except Exception as e:
        print(f"ARB -> UNI 跨链失败，错误: {e}")
        return False

# 主函数
def main():
    # 从私钥生成账户
    accounts = [w3_uni.eth.account.from_key(pk) for pk in PRIVATE_KEYS]
    
    print(f"加载了 {len(accounts)} 个账户")
    print(f"开始无限次 UNI 和 ARB 互跨，每次 {AMOUNT_ETH} ETH，当前时间: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # 无限跨链循环
    while True:
        for idx, account in enumerate(accounts):
            # UNI -> ARB
            bridge_uni_to_arb(AMOUNT_ETH, account)
            
            # ARB -> UNI
            bridge_arb_to_uni(AMOUNT_ETH, account)

if __name__ == "__main__":
    main()
