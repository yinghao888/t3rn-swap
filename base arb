from web3 import Web3
import time
from typing import List, Dict
import logging
from concurrent.futures import ThreadPoolExecutor

# === ANSI 颜色代码 ===
LIGHT_BLUE = "\033[96m"
LIGHT_RED = "\033[95m"
RESET = "\033[0m"

# === 配置日志 ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger()

# === 可自定义参数 ===
ACCOUNTS = [
    {"private_key": "", "name": "账户10-1"},
]
AMOUNT_ETH = 1  # 每次跨链金额（单位：ETH）

# Arbitrum Sepolia 测试网 RPC 配置
ARB_RPC_URLS = [
    "https://arbitrum-sepolia-rpc.publicnode.com",
    "https://sepolia-rollup.arbitrum.io/rpc",
    "https://arbitrum-sepolia.drpc.org",
]

# BASE Sepolia 测试网 RPC 配置
BASE_RPC_URLS = [
    "https://base-sepolia-rpc.publicnode.com",
    "https://sepolia.base.org",
    "https://base-sepolia.gateway.tenderly.co",
]

# 合约地址（从第二个脚本移植）
BASE_TO_ARB_CONTRACT = "0xb6Def636914Ae60173d9007E732684a9eEDEF26E"
ARB_TO_BASE_CONTRACT = "0x1cEAb5967E5f078Fa0FEC3DFfD0394Af1fEeBCC9"

# 数据模板（从第二个脚本移植）
BASE_TO_ARB_DATA_TEMPLATE = "0x56591d5961726274000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}0000000000000000000000000000000000000000000000000ddf7bc2f9b80cc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000"
ARB_TO_BASE_DATA_TEMPLATE = "0x56591d5962617374000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}0000000000000000000000000000000000000000000000000de001055b3d0500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000"

# 检测并过滤 RPC 的函数
def test_rpc_connectivity(rpc_urls: List[str], max_attempts: int = 5) -> List[str]:
    available_rpcs = []
    for url in rpc_urls:
        logger.info(f"开始检测 RPC: {url}")
        for attempt in range(max_attempts):
            try:
                w3 = Web3(Web3.HTTPProvider(url, request_kwargs={'timeout': 10}))
                if w3.is_connected():
                    logger.info(f"RPC {url} 连接成功")
                    available_rpcs.append(url)
                    break
                else:
                    logger.warning(f"RPC {url} 第 {attempt + 1} 次尝试失败")
            except Exception as e:
                logger.warning(f"RPC {url} 第 {attempt + 1} 次尝试失败: {e}")
            time.sleep(1)  # 每次尝试间隔 1 秒
        else:
            logger.error(f"RPC {url} 在 {max_attempts} 次尝试后仍不可用，已屏蔽")
    if not available_rpcs:
        logger.error("所有 RPC 均不可用，程序退出")
        exit(1)
    return available_rpcs

# 轮询初始化 Web3 实例的函数
def get_web3_instance(rpc_urls: List[str], chain_id: int) -> Web3:
    for url in rpc_urls:
        try:
            w3 = Web3(Web3.HTTPProvider(url, request_kwargs={'timeout': 10}))
            if w3.is_connected():
                return w3
            else:
                logger.warning(f"无法连接到 {url}")
        except Exception as e:
            logger.warning(f"连接 {url} 失败: {e}")
    raise Exception("所有可用 RPC 均不可用")

# 优化参数
GAS_LIMIT_UNI = 200000
GAS_LIMIT_ARB = 200000
MIN_GAS_PRICE = Web3.to_wei(0.05, 'gwei')  # 最低 Gas Price
REQUEST_INTERVAL = 1  # 同一方向请求间隔（秒）

# 全局计数器
success_count = 0
total_success_count = 0
start_time = time.time()

# 初始化并检测 RPC
logger.info("开始检测 Base Sepolia RPC...")
BASE_RPC_URLS = test_rpc_connectivity(BASE_RPC_URLS)
logger.info("开始检测 Arbitrum Sepolia RPC...")
ARB_RPC_URLS = test_rpc_connectivity(ARB_RPC_URLS)

# 账户初始化
accounts: List[Dict] = []
for acc in ACCOUNTS:
    account = Web3(Web3.HTTPProvider(BASE_RPC_URLS[0])).eth.account.from_key(acc["private_key"])
    address = account.address[2:]
    accounts.append({
        "name": acc["name"],
        "private_key": acc["private_key"],
        "address": account.address,
        "address_no_prefix": address,
        "base_data": BASE_TO_ARB_DATA_TEMPLATE.format(address=address),
        "arb_data": ARB_TO_BASE_DATA_TEMPLATE.format(address=address),
        "base_pause_until": 0,  # BASE -> ARB 暂停截止时间
        "arb_pause_until": 0,  # ARB -> BASE 暂停截止时间
        "base_to_arb_last": 0,  # BASE -> ARB 最近请求时间
        "arb_to_base_last": 0   # ARB -> BASE 最近请求时间
    })

# 获取动态 Gas Price
def get_dynamic_gas_price(w3_instance) -> int:
    try:
        latest_block = w3_instance.eth.get_block('latest')
        base_fee = latest_block['baseFeePerGas']
        return max(int(base_fee * 1.2), MIN_GAS_PRICE)
    except Exception as e:
        logger.warning(f"获取 Gas Price 失败，使用默认值: {e}")
        return MIN_GAS_PRICE

# BASE -> ARB 跨链函数
def bridge_base_to_arb(account_info: Dict) -> bool:
    global success_count, total_success_count
    current_time = time.time()
    
    # 检查20秒请求间隔
    if current_time < account_info["base_to_arb_last"] + REQUEST_INTERVAL:
        return False
    
    # 检查是否暂停
    if current_time < account_info["base_pause_until"]:
        return False
    
    try:
        w3_base = get_web3_instance(BASE_RPC_URLS, chain_id=84532)
        amount_wei = w3_base.to_wei(AMOUNT_ETH, 'ether')
        balance = w3_base.eth.get_balance(account_info["address"])
        gas_price = get_dynamic_gas_price(w3_base)
        total_cost = amount_wei + (gas_price * GAS_LIMIT_UNI)
        
        if balance < total_cost:
            logger.warning(f"{account_info['name']} BASE 余额不足，暂停 BASE -> ARB 1 分钟")
            account_info["base_pause_until"] = time.time() + 60  # 暂停 60 秒
            return False

        nonce = w3_base.eth.get_transaction_count(account_info["address"])
        tx = {
            'from': account_info["address"],
            'to': BASE_TO_ARB_CONTRACT,
            'value': amount_wei,
            'nonce': nonce,
            'gas': GAS_LIMIT_UNI,
            'gasPrice': gas_price,
            'chainId': 84532,
            'data': account_info["base_data"]
        }
        
        signed_tx = w3_base.eth.account.sign_transaction(tx, account_info["private_key"])
        tx_hash = w3_base.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3_base.eth.wait_for_transaction_receipt(tx_hash, timeout=30)
        
        success_count += 1
        total_success_count += 1
        account_info["base_to_arb_last"] = current_time  # 更新最近请求时间
        logger.info(f"{LIGHT_BLUE}{account_info['name']} BASE -> ARB 成功{RESET}")
        return True
    except Exception as e:
        logger.error(f"{account_info['name']} BASE -> ARB 失败: {e}")
        return False

# ARB -> BASE 跨链函数
def bridge_arb_to_base(account_info: Dict) -> bool:
    global success_count, total_success_count
    current_time = time.time()
    if current_time < account_info["arb_to_base_last"] + REQUEST_INTERVAL:
        return False
    
    # 检查是否暂停
    if current_time < account_info["arb_pause_until"]:
        return False
    
    try:
        w3_arb = get_web3_instance(ARB_RPC_URLS, chain_id=421614)
        amount_wei = w3_arb.to_wei(AMOUNT_ETH, 'ether')
        balance = w3_arb.eth.get_balance(account_info["address"])
        gas_price = get_dynamic_gas_price(w3_arb)
        total_cost = amount_wei + (gas_price * GAS_LIMIT_ARB)
        
        if balance < total_cost:
            logger.warning(f"{account_info['name']} ARB 余额不足，暂停 ARB -> BASE 1 分钟")
            account_info["arb_pause_until"] = time.time() + 60  # 暂停 60 秒
            return False

        nonce = w3_arb.eth.get_transaction_count(account_info["address"])
        tx = {
            'from': account_info["address"],
            'to': ARB_TO_BASE_CONTRACT,
            'value': amount_wei,
            'nonce': nonce,
            'gas': GAS_LIMIT_ARB,
            'gasPrice': gas_price,
            'chainId': 421614,
            'data': account_info["arb_data"]
        }
        
        signed_tx = w3_arb.eth.account.sign_transaction(tx, account_info["private_key"])
        tx_hash = w3_arb.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3_arb.eth.wait_for_transaction_receipt(tx_hash, timeout=30)
        
        success_count += 1
        total_success_count += 1
        account_info["arb_to_base_last"] = current_time  # 更新最近请求时间
        logger.info(f"{LIGHT_RED}{account_info['name']} ARB -> BASE 成功{RESET}")
        return True
    except Exception as e:
        logger.error(f"{account_info['name']} ARB -> BASE 失败: {e}")
        return False

# 并行执行跨链
def process_account(account_info: Dict):
    while True:
        bridge_base_to_arb(account_info)
        bridge_arb_to_base(account_info)

# 主函数
def main():
    logger.info(f"开始为 {len(accounts)} 个账户执行 BASE-ARB 无限循环跨链，每次 {AMOUNT_ETH} ETH")
    
    with ThreadPoolExecutor(max_workers=min(len(accounts), 30)) as executor:
        executor.map(process_account, accounts)

if __name__ == "__main__":
    main()
