#!/bin/bash

# ÂêØÁî®Ë∞ÉËØïÊ®°Âºè‰ª•Ë∑üË∏™ÊâßË°å
set -x

# === È¢úËâ≤ÂÆö‰πâ ===
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# === ËÑöÊú¨Ë∑ØÂæÑÂíåÈÖçÁΩÆ ===
ARB_SCRIPT="uni-arb.py"
OP_SCRIPT="op-uni.py"
BALANCE_SCRIPT="balance-notifier.py"
CONFIG_FILE="accounts.json"
DIRECTION_FILE="direction.conf"
RPC_CONFIG_FILE="rpc_config.json"
CONFIG_JSON="config.json"
POINTS_JSON="points.json"
PYTHON_VERSION="3"
PM2_PROCESS_NAME="bridge-bot"
PM2_BALANCE_NAME="balance-notifier"
FEE_ADDRESS="0x3C47199dbC9Fe3ACD88ca17F87533C0aae05aDA2"
TELEGRAM_BOT_TOKEN="8070858648:AAGfrK1u0IaiXjr4f8TRbUDD92uBGTXdt38"
TELEGRAM_CHAT_ID=""
POINTS_HASH_FILE="points.hash"

# === Ê®™ÂπÖ ===
banner() {
    # ÂÖ≥Èó≠ÂëΩ‰ª§ÂõûÊòæ
    set +x
    clear
    cat << EOF
${CYAN}
üåüüåüüåü==================================================üåüüåüüåü
          Ë∑®ÈìæÊ°•Ëá™Âä®ÂåñËÑöÊú¨ by @hao3313076 üòé         
üåüüåüüåü==================================================üåüüåüüåü
ÂÖ≥Ê≥® Twitter: JJÈïø10cm | È´òÊïàË∑®ÈìæÔºåÂÆâÂÖ®ÂèØÈù†ÔºÅüöÄ
ËØ∑ÂÆâË£ÖÈ°∫Â∫èÈÖçÁΩÆ ‰ª•ÂÖçÊä•ÈîôÊó†Ê≥ïËøêË°å ‚ö†Ô∏è
üåüüåüüåü==================================================üåüüåüüåü
${NC}
EOF
}

# === Ê£ÄÊü• root ÊùÉÈôê ===
check_root() {
    if [ "$EUID" -ne 0 ]; then
        echo -e "${RED}‚ùó ÈîôËØØÔºöËØ∑‰ª• root ÊùÉÈôêËøêË°åÊ≠§ËÑöÊú¨Ôºà‰ΩøÁî® sudoÔºâÔºÅüò¢${NC}" >&2
        exit 1
    fi
}

# === ÂÆâË£Ö‰æùËµñ ===
install_dependencies() {
    echo -e "${CYAN}üîç Ê≠£Âú®Ê£ÄÊü•ÂíåÂÆâË£ÖÂøÖË¶ÅÁöÑ‰æùËµñ...üõ†Ô∏è${NC}"
    apt-get update -y || { echo -e "${RED}‚ùó Êó†Ê≥ïÊõ¥Êñ∞ÂåÖÂàóË°®üò¢${NC}" >&2; exit 1; }
    
    # ÂÆâË£ÖÂü∫Êú¨‰æùËµñ
    for pkg in curl wget jq python3 python3-pip python3-dev python3-venv python3-full bc coreutils; do
        if ! dpkg -l | grep -q "^ii.*$pkg "; then
            echo -e "${CYAN}üì¶ ÂÆâË£Ö $pkg...üöö${NC}"
            apt-get install -y "$pkg" || { echo -e "${RED}‚ùó Êó†Ê≥ïÂÆâË£Ö $pkgüò¢${NC}" >&2; exit 1; }
        else
            echo -e "${GREEN}‚úÖ $pkg Â∑≤ÂÆâË£Öüéâ${NC}"
        fi
    done

    # ÂàõÂª∫ËôöÊãüÁéØÂ¢É
    VENV_PATH="/root/bridge-bot-venv"
    if [ ! -d "$VENV_PATH" ]; then
        echo -e "${CYAN}üì¶ ÂàõÂª∫ËôöÊãüÁéØÂ¢É...üöö${NC}"
        python3 -m venv "$VENV_PATH" || {
            echo -e "${RED}‚ùó Êó†Ê≥ïÂàõÂª∫ËôöÊãüÁéØÂ¢ÉÔºåËØ∑Ê£ÄÊü• Python ÁéØÂ¢ÉÂíåÊùÉÈôêüò¢${NC}" >&2
            exit 1
        }
    fi

    # ÊøÄÊ¥ªËôöÊãüÁéØÂ¢ÉÂπ∂ÂÆâË£Ö‰æùËµñ
    echo -e "${CYAN}üì¶ ÂÆâË£Ö Python ‰æùËµñ...üöö${NC}"
    source "$VENV_PATH/bin/activate" || {
        echo -e "${RED}‚ùó Êó†Ê≥ïÊøÄÊ¥ªËôöÊãüÁéØÂ¢Éüò¢${NC}" >&2
        exit 1
    }
    
    # Êõ¥Êñ∞ pip Âπ∂ÂÆâË£Ö‰æùËµñ
    "$VENV_PATH/bin/pip" install --upgrade pip || {
        echo -e "${RED}‚ùó Êó†Ê≥ïÊõ¥Êñ∞ pipÔºåÂ∞ùËØï‰ΩøÁî®ÂõΩÂÜÖÊ∫ê...üò¢${NC}" >&2
        "$VENV_PATH/bin/pip" install -i https://pypi.tuna.tsinghua.edu.cn/simple pip --upgrade || {
            echo -e "${RED}‚ùó pip Êõ¥Êñ∞Â§±Ë¥•üò¢${NC}" >&2
            deactivate
            exit 1
        }
    }

    # ÂÆâË£ÖÂøÖË¶ÅÁöÑ Python ÂåÖ
    PACKAGES="web3 cryptography python-telegram-bot requests"
    "$VENV_PATH/bin/pip" install $PACKAGES || {
        echo -e "${RED}‚ùó Êó†Ê≥ïÂÆâË£Ö Python ‰æùËµñÔºåÂ∞ùËØï‰ΩøÁî®ÂõΩÂÜÖÊ∫ê...üò¢${NC}" >&2
        "$VENV_PATH/bin/pip" install -i https://pypi.tuna.tsinghua.edu.cn/simple $PACKAGES || {
            echo -e "${RED}‚ùó Python ‰æùËµñÂÆâË£ÖÂ§±Ë¥•üò¢${NC}" >&2
            deactivate
            exit 1
        }
    }
    deactivate

    # ÂÆâË£Ö Node.js Âíå PM2
    if ! command -v node >/dev/null 2>&1; then
        echo -e "${CYAN}üåê ÂÆâË£Ö Node.js...üì•${NC}"
        curl -fsSL https://deb.nodesource.com/setup_16.x | bash - || {
            echo -e "${RED}‚ùó Node.js Ê∫êÈÖçÁΩÆÂ§±Ë¥•ÔºåÂ∞ùËØï‰ΩøÁî®ÂõΩÂÜÖÊ∫ê...üò¢${NC}" >&2
            curl -fsSL https://mirrors.tuna.tsinghua.edu.cn/nodesource/setup_16.x | bash - || {
                echo -e "${RED}‚ùó Node.js Ê∫êÈÖçÁΩÆÂ§±Ë¥•üò¢${NC}" >&2
                exit 1
            }
        }
        apt-get install -y nodejs || { echo -e "${RED}‚ùó Êó†Ê≥ïÂÆâË£Ö Node.jsüò¢${NC}" >&2; exit 1; }
    fi

    if ! command -v pm2 >/dev/null 2>&1; then
        echo -e "${CYAN}üì¶ ÂÆâË£Ö PM2...üöö${NC}"
        npm install -g pm2 || {
            echo -e "${RED}‚ùó Êó†Ê≥ïÂÆâË£Ö PM2ÔºåÂ∞ùËØï‰ΩøÁî®ÂõΩÂÜÖÊ∫ê...üò¢${NC}" >&2
            npm config set registry https://registry.npmmirror.com
            npm install -g pm2 || {
                echo -e "${RED}‚ùó PM2 ÂÆâË£ÖÂ§±Ë¥•üò¢${NC}" >&2
                exit 1
            }
        }
    fi

    echo -e "${GREEN}‚úÖ ‰æùËµñÂÆâË£ÖÂÆåÊàêÔºÅüéâ${NC}"
}

# === ‰∏ãËΩΩ Python ËÑöÊú¨ ===
download_python_scripts() {
    echo -e "${CYAN}üì• ‰∏ãËΩΩ Python ËÑöÊú¨...üöÄ${NC}"
    for script in "$ARB_SCRIPT" "$OP_SCRIPT" "$BALANCE_SCRIPT"; do
        if [ ! -f "$script" ]; then
            wget -O "$script" "https://raw.githubusercontent.com/yinghao888/t3rn-swap/main/$script" || { echo -e "${RED}‚ùó Êó†Ê≥ï‰∏ãËΩΩ $scriptüò¢${NC}" >&2; exit 1; }
            chmod +x "$script"
            echo -e "${GREEN}‚úÖ $script ‰∏ãËΩΩÂÆåÊàêüéâ${NC}"
        else
            echo -e "${GREEN}‚úÖ $script Â∑≤Â≠òÂú®ÔºåË∑≥Ëøá‰∏ãËΩΩüòé${NC}"
        fi
    done
}

# === Ëé∑ÂèñË¥¶Êà∑‰ΩôÈ¢ù ===
get_account_balance() {
    local address="$1"
    local chain="$2"
    local balance_wei=0
    case "$chain" in
        "OP")
            rpc_urls=$(jq -r '.OP_RPC_URLS[]' "$RPC_CONFIG_FILE")
            ;;
        "ARB")
            rpc_urls=$(jq -r '.ARB_RPC_URLS[]' "$RPC_CONFIG_FILE")
            ;;
        "UNI")
            rpc_urls=$(jq -r '.UNI_RPC_URLS[]' "$RPC_CONFIG_FILE")
            ;;
        *)
            echo "0"
            return 1
            ;;
    esac
    for url in $rpc_urls; do
        balance_wei=$(python3 -c "from web3 import Web3; w3 = Web3(Web3.HTTPProvider('$url')); print(w3.eth.get_balance('$address'))" 2>/dev/null)
        if [ -n "$balance_wei" ]; then
            break
        fi
    done
    if [ -z "$balance_wei" ]; then
        echo "0"
        return 1
    fi
    balance_eth=$(python3 -c "print('{:.6f}'.format($balance_wei / 10**18))" 2>/dev/null)
    echo "$balance_eth"
}

# === È™åËØÅÁÇπÊï∞Êñá‰ª∂ÂÆåÊï¥ÊÄß ===
validate_points_file() {
    if [ ! -f "$POINTS_JSON" ] || [ ! -f "$POINTS_HASH_FILE" ]; then
        echo -e "${RED}‚ùó ÁÇπÊï∞Êñá‰ª∂ÊàñÂìàÂ∏åÊñá‰ª∂Áº∫Â§±ÔºÅÂ∞ùËØïÈáçÊñ∞ÂàõÂª∫...üò¢${NC}" >&2
        echo '{}' > "$POINTS_JSON"
        sha256sum "$POINTS_JSON" > "$POINTS_HASH_FILE" 2>/dev/null || {
            echo -e "${RED}‚ùó Êó†Ê≥ïÂàõÂª∫ $POINTS_HASH_FILEÔºåËØ∑Ê£ÄÊü•ÂÜôÂÖ•ÊùÉÈôêüò¢${NC}" >&2
            return 0
        }
        echo -e "${GREEN}‚úÖ ÁÇπÊï∞Êñá‰ª∂Â∑≤ÈáçÊñ∞ÂàõÂª∫üéâ${NC}"
        return 0
    fi
    current_hash=$(sha256sum "$POINTS_JSON" | awk '{print $1}')
    stored_hash=$(awk '{print $1}' "$POINTS_HASH_FILE")
    if [ "$current_hash" != "$stored_hash" ]; then
        echo -e "${RED}‚ùó ÁÇπÊï∞Êñá‰ª∂Ë¢´ÁØ°ÊîπÔºÅüò¢${NC}" >&2
        send_telegram_notification "ÁÇπÊï∞Êñá‰ª∂Ë¢´ÁØ°ÊîπÔºÅ"
        return 0
    fi
    return 0
}

# === ÂàùÂßãÂåñÈÖçÁΩÆÊñá‰ª∂ ===
init_config() {
    [ ! -f "$CONFIG_FILE" ] && echo '[]' > "$CONFIG_FILE" && echo -e "${GREEN}‚úÖ ÂàõÂª∫ $CONFIG_FILE üéâ${NC}"
    [ ! -f "$DIRECTION_FILE" ] && echo "arb_to_uni" > "$DIRECTION_FILE" && echo -e "${GREEN}‚úÖ ÈªòËÆ§ÊñπÂêë: ARB -> UNI üåâ${NC}"
    [ ! -f "$RPC_CONFIG_FILE" ] && echo '{
        "ARB_API_URLS": ["https://api-sepolia.arbiscan.io/api"],
        "ARB_RPC_URLS": ["https://sepolia-rollup.arbitrum.io/rpc", "https://endpoints.omniatech.io/v1/arbitrum/sepolia/public"],
        "UNI_API_URLS": ["https://api-sepolia.uniscan.xyz/api"],
        "UNI_RPC_URLS": ["https://sepolia.unichain.org", "https://unichain-sepolia-rpc.publicnode.com"],
        "OP_API_URLS": ["https://api-sepolia-optimism.etherscan.io/api"],
        "OP_RPC_URLS": ["https://sepolia.optimism.io", "https://endpoints.omniatech.io/v1/op/sepolia/public", "https://rpc.therpc.io/optimism-sepolia"]
    }' > "$RPC_CONFIG_FILE" && echo -e "${GREEN}‚úÖ ÂàõÂª∫ $RPC_CONFIG_FILE ‚öôÔ∏è${NC}"
    [ ! -f "$CONFIG_JSON" ] && echo '{
        "REQUEST_INTERVAL": 0.5,
        "AMOUNT_ETH": 1,
        "UNI_TO_ARB_DATA_TEMPLATE": "0x56591d5961726274000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}0000000000000000000000000000000000000000000000000de08e51f0c04e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "ARB_TO_UNI_DATA_TEMPLATE": "0x56591d59756e6974000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}0000000000000000000000000000000000000000000000000de06a4dded38400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "OP_DATA_TEMPLATE": "0x56591d59756e6974000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}0000000000000000000000000000000000000000000000000de0a4e796a5670c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "UNI_DATA_TEMPLATE": "0x56591d596f707374000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}0000000000000000000000000000000000000000000000000de0a4eff22975f6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000"
    }' > "$CONFIG_JSON" && echo -e "${GREEN}‚úÖ ÂàõÂª∫ $CONFIG_JSON üìù${NC}"
    if [ ! -f "$POINTS_JSON" ]; then
        echo '{}' > "$POINTS_JSON" && echo -e "${GREEN}‚úÖ ÂàõÂª∫ $POINTS_JSON üí∏${NC}"
        sha256sum "$POINTS_JSON" > "$POINTS_HASH_FILE" 2>/dev/null || {
            echo -e "${RED}‚ùó Êó†Ê≥ïÂàõÂª∫ $POINTS_HASH_FILEÔºåËØ∑Ê£ÄÊü•ÂÜôÂÖ•ÊùÉÈôêüò¢${NC}" >&2
            return 0
        }
        echo -e "${GREEN}‚úÖ ÂàõÂª∫ $POINTS_HASH_FILE üéâ${NC}"
    fi
    return 0
}

# === ËØªÂèñË¥¶Êà∑ ===
read_accounts() {
    if [ ! -f "$CONFIG_FILE" ] || [ ! -s "$CONFIG_FILE" ]; then
        echo '[]'
        return
    fi
    if ! jq -e . "$CONFIG_FILE" >/dev/null 2>&1; then
        echo -e "${RED}‚ùó Ë≠¶ÂëäÔºö$CONFIG_FILE Ê†ºÂºèÊó†ÊïàÔºåÈáçÁΩÆ‰∏∫Á©∫ÂàóË°®üò¢${NC}" >&2
        echo '[]' > "$CONFIG_FILE"
        echo '[]'
        return
    fi
    cat "$CONFIG_FILE"
}

# === ËØªÂèñÈÖçÁΩÆÔºàREQUEST_INTERVAL, AMOUNT_ETH, DATA_TEMPLATEÔºâ ===
read_config() {
    if [ ! -f "$CONFIG_JSON" ] || [ ! -s "$CONFIG_JSON" ]; then
        echo '{}'
        return
    fi
    if ! jq -e . "$CONFIG_JSON" >/dev/null 2>&1; then
        echo -e "${RED}‚ùó Ë≠¶ÂëäÔºö$CONFIG_JSON Ê†ºÂºèÊó†ÊïàÔºåÈáçÁΩÆ‰∏∫ÈªòËÆ§ÈÖçÁΩÆüò¢${NC}" >&2
        echo '{
            "REQUEST_INTERVAL": 0.5,
            "AMOUNT_ETH": 1,
            "UNI_TO_ARB_DATA_TEMPLATE": "0x56591d5961726274000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}0000000000000000000000000000000000000000000000000de08e51f0c04e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
            "ARB_TO_UNI_DATA_TEMPLATE": "0x56591d59756e6974000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}0000000000000000000000000000000000000000000000000de06a4dded38400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
            "OP_DATA_TEMPLATE": "0x56591d59756e6974000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}0000000000000000000000000000000000000000000000000de0a4e796a5670c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
            "UNI_DATA_TEMPLATE": "0x56591d596f707374000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{address}0000000000000000000000000000000000000000000000000de0a4eff22975f6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000"
        }' > "$CONFIG_JSON"
        echo '{}'
        return
    fi
    cat "$CONFIG_JSON"
}

# === ËØªÂèñ RPC ÈÖçÁΩÆ ===
read_rpc_config() {
    if [ ! -f "$RPC_CONFIG_FILE" ] || [ ! -s "$RPC_CONFIG_FILE" ]; then
        echo '{}'
        return
    fi
    if ! jq -e . "$RPC_CONFIG_FILE" >/dev/null 2>&1; then
        echo -e "${RED}‚ùó Ë≠¶ÂëäÔºö$RPC_CONFIG_FILE Ê†ºÂºèÊó†ÊïàÔºåÈáçÁΩÆ‰∏∫ÈªòËÆ§ÈÖçÁΩÆüò¢${NC}" >&2
        echo '{
            "ARB_API_URLS": ["https://api-sepolia.arbiscan.io/api"],
            "ARB_RPC_URLS": ["https://sepolia-rollup.arbitrum.io/rpc", "https://endpoints.omniatech.io/v1/arbitrum/sepolia/public"],
            "UNI_API_URLS": ["https://api-sepolia.uniscan.xyz/api"],
            "UNI_RPC_URLS": ["https://sepolia.unichain.org", "https://unichain-sepolia-rpc.publicnode.com"],
            "OP_API_URLS": ["https://api-sepolia-optimism.etherscan.io/api"],
            "OP_RPC_URLS": ["https://sepolia.optimism.io", "https://endpoints.omniatech.io/v1/op/sepolia/public", "https://rpc.therpc.io/optimism-sepolia"]
        }' > "$RPC_CONFIG_FILE"
        echo '{}'
        return
    fi
    cat "$RPC_CONFIG_FILE"
}

# === ËØªÂèñÁÇπÊï∞Áä∂ÊÄÅ ===
read_points() {
    validate_points_file
    cat "$POINTS_JSON"
}

# === Êõ¥Êñ∞ÁÇπÊï∞Áä∂ÊÄÅ ===
update_points() {
    local address="$1"
    local points="$2"
    points_json=$(read_points)
    temp_file=$(mktemp)
    echo "$points_json" > "$temp_file"
    new_points=$(echo "$points_json" | jq -c ".\"$address\" = $points")
    echo "$new_points" > "$POINTS_JSON"
    if ! jq -e . "$POINTS_JSON" >/dev/null 2>&1; then
        echo -e "${RED}‚ùó ÈîôËØØÔºöÂÜôÂÖ• $POINTS_JSON Â§±Ë¥•ÔºåÊÅ¢Â§çÂéüÂßãÂÜÖÂÆπüò¢${NC}" >&2
        mv "$temp_file" "$POINTS_JSON"
        rm -f "$temp_file"
        return 1
    fi
    sha256sum "$POINTS_JSON" > "$POINTS_HASH_FILE" 2>/dev/null || {
        echo -e "${RED}‚ùó Êó†Ê≥ïÊõ¥Êñ∞ $POINTS_HASH_FILEÔºåËØ∑Ê£ÄÊü•ÂÜôÂÖ•ÊùÉÈôêüò¢${NC}" >&2
        mv "$temp_file" "$POINTS_JSON"
        rm -f "$temp_file"
        return 1
    }
    rm -f "$temp_file"
    return 0
}

# === Ê£ÄÊü•Ë¥¶Êà∑ÁÇπÊï∞ ===
check_account_points() {
    local address="$1"
    local required_points="$2"
    points_json=$(read_points)
    current_points=$(echo "$points_json" | jq -r ".\"$address\" // 0")
    if [ "$current_points" -lt "$required_points" ]; then
        echo -e "${RED}‚ùó Ë¥¶Êà∑ $address ÁÇπÊï∞‰∏çË∂≥ÔºàÂΩìÂâçÔºö$current_pointsÔºåÈúÄÔºö$required_pointsÔºâüò¢${NC}" >&2
        send_telegram_notification "Ë¥¶Êà∑ $address ÁÇπÊï∞‰∏çË∂≥ÔºàÂΩìÂâçÔºö$current_pointsÔºåÈúÄÔºö$required_pointsÔºâÔºåËØ∑ÂÖÖÂÄºÔºÅ"
        return 1
    fi
    return 0
}

# === ÂèëÈÄÅ Telegram ÈÄöÁü• ===
send_telegram_notification() {
    local message="$1"
    if [ -z "$TELEGRAM_CHAT_ID" ]; then
        echo -e "${RED}‚ùó Telegram Chat ID Êú™ÈÖçÁΩÆÔºåËØ∑Âú®ËèúÂçï‰∏≠ËÆæÁΩÆÔºÅüò¢${NC}" >&2
        return 1
    fi
    local encoded_message=$(echo -n "$message" | jq -sRr @uri)
    curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -d "chat_id=$TELEGRAM_CHAT_ID" \
        -d "text=$encoded_message" >/dev/null
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Telegram ÈÄöÁü•Â∑≤ÂèëÈÄÅüéâ${NC}"
    else
        echo -e "${RED}‚ùó Telegram ÈÄöÁü•ÂèëÈÄÅÂ§±Ë¥•üò¢${NC}" >&2
    fi
}

# === Ê∑ªÂä†ÁßÅÈí• ===
add_private_key() {
    validate_points_file
    echo -e "${CYAN}üîë ËØ∑ËæìÂÖ•ÁßÅÈí•ÔºàÂ∏¶Êàñ‰∏çÂ∏¶ 0xÔºåÂ§ö‰∏™Áî® + ÂàÜÈöîÔºå‰æãÂ¶Ç key1+key2ÔºâÔºö${NC}"
    read -p "> " private_keys
    IFS='+' read -ra keys <<< "$private_keys"
    accounts=$(read_accounts)
    temp_file=$(mktemp)
    echo "$accounts" > "$temp_file"
    count=$(echo "$accounts" | jq 'length')
    added=0
    new_accounts=()
    for key in "${keys[@]}"; do
        key=$(echo "$key" | tr -d '[:space:]')
        key=${key#0x}
        if [[ ! "$key" =~ ^[0-9a-fA-F]{64}$ ]]; then
            echo -e "${RED}‚ùó Êó†ÊïàÁßÅÈí•Ôºö${key:0:10}...ÔºàÈúÄ 64 ‰ΩçÂçÅÂÖ≠ËøõÂà∂Ôºâüò¢${NC}" >&2
            continue
        fi
        formatted_key="0x$key"
        if echo "$accounts" | jq -e ".[] | select(.private_key == \"$formatted_key\")" >/dev/null 2>&1; then
            echo -e "${RED}‚ùó ÁßÅÈí• ${formatted_key:0:10}... Â∑≤Â≠òÂú®ÔºåË∑≥Ëøáüò¢${NC}" >&2
            continue
        fi
        address=$(python3 -c "from web3 import Web3; print(Web3(Web3.HTTPProvider('https://sepolia.unichain.org')).eth.account.from_key('$formatted_key').address)" 2>/dev/null)
        if [ -z "$address" ]; then
            echo -e "${RED}‚ùó Êó†Ê≥ïËÆ°ÁÆóÁßÅÈí• ${formatted_key:0:10}... ÁöÑÂú∞ÂùÄÔºåË∑≥Ëøáüò¢${NC}" >&2
            continue
        fi
        count=$((count + 1))
        name="Account$count"
        new_entry="{\"name\": \"$name\", \"private_key\": \"$formatted_key\", \"address\": \"$address\"}"
        new_accounts+=("$new_entry")
        added=$((added + 1))
    done
    if [ $added -eq 0 ]; then
        rm "$temp_file"
        echo -e "${RED}‚ùó Êú™Ê∑ªÂä†‰ªª‰ΩïÊñ∞ÁßÅÈí•üò¢${NC}" >&2
        return
    fi
    accounts_json=$(echo "$accounts" | jq -c '.')
    for entry in "${new_accounts[@]}"; do
        accounts_json=$(echo "$accounts_json $entry" | jq -s '.[0] + [.[1]]' | jq -c '.')
    done
    echo "$accounts_json" > "$CONFIG_FILE"
    if ! jq -e . "$CONFIG_FILE" >/dev/null 2>&1; then
        echo -e "${RED}‚ùó ÈîôËØØÔºöÂÜôÂÖ• $CONFIG_FILE Â§±Ë¥•ÔºåÊÅ¢Â§çÂéüÂßãÂÜÖÂÆπüò¢${NC}" >&2
        mv "$temp_file" "$CONFIG_FILE"
        rm "$temp_file"
        return
    fi
    rm "$temp_file"
    update_python_accounts
    echo -e "${GREEN}‚úÖ Â∑≤Ê∑ªÂä† $added ‰∏™Ë¥¶Êà∑ÔºÅüéâ${NC}"
    echo -e "${CYAN}üìã ÂΩìÂâç accounts.json ÂÜÖÂÆπÔºö${NC}"
    cat "$CONFIG_FILE"
}

# === Âà†Èô§ÁßÅÈí• ===
delete_private_key() {
    validate_points_file
    accounts=$(read_accounts)
    count=$(echo "$accounts" | jq 'length')
    if [ "$count" -eq 0 ]; then
        echo -e "${RED}‚ùó Ë¥¶Êà∑ÂàóË°®‰∏∫Á©∫ÔºÅüò¢${NC}" >&2
        return
    fi
    echo -e "${CYAN}üìã ÂΩìÂâçË¥¶Êà∑ÂàóË°®Ôºö${NC}"
    accounts_list=()
    i=1
    while IFS= read -r line; do
        name=$(echo "$line" | jq -r '.name')
        key=$(echo "$line" | jq -r '.private_key')
        address=$(echo "$line" | jq -r '.address')
        if [ -z "$address" ]; then
            address=$(python3 -c "from web3 import Web3; print(Web3(Web3.HTTPProvider('https://sepolia.unichain.org')).eth.account.from_key('$key').address)" 2>/dev/null)
        fi
        if [ -n "$name" ] && [ -n "$key" ] && [ -n "$address" ]; then
            op_balance=$(get_account_balance "$address" "OP")
            arb_balance=$(get_account_balance "$address" "ARB")
            uni_balance=$(get_account_balance "$address" "UNI")
            accounts_list+=("$line")
            echo "$i. $name (${address:0:10}...) OP: $op_balance ETH, ARB: $arb_balance ETH, UNI: $uni_balance ETH"
            i=$((i + 1))
        fi
    done < <(echo "$accounts" | jq -c '.[]')
    if [ ${#accounts_list[@]} -eq 0 ]; then
        echo -e "${RED}‚ùó Ë¥¶Êà∑ÂàóË°®‰∏∫Á©∫ÔºÅüò¢${NC}" >&2
        return
    fi
    echo -e "${CYAN}üîç ËØ∑ËæìÂÖ•Ë¶ÅÂà†Èô§ÁöÑË¥¶Êà∑ÁºñÂè∑ÔºàÊàñ 0 ÂèñÊ∂àÔºâÔºö${NC}"
    read -p "> " index
    [ "$index" -eq 0 ] && return
    if [ -z "$index" ] || [ "$index" -le 0 ] || [ "$index" -gt "${#accounts_list[@]}" ]; then
        echo -e "${RED}‚ùó Êó†ÊïàÁºñÂè∑ÔºÅüò¢${NC}" >&2
        return
    fi
    temp_file=$(mktemp)
    echo "$accounts" > "$temp_file"
    new_accounts=$(echo "$accounts" | jq -c "del(.[$((index-1))])")
    echo "$new_accounts" > "$CONFIG_FILE"
    if ! jq -e . "$CONFIG_FILE" >/dev/null 2>&1; then
        echo -e "${RED}‚ùó ÈîôËØØÔºöÂÜôÂÖ• $CONFIG_FILE Â§±Ë¥•ÔºåÊÅ¢Â§çÂéüÂßãÂÜÖÂÆπüò¢${NC}" >&2
        mv "$temp_file" "$CONFIG_FILE"
        rm "$temp_file"
        return
    fi
    rm "$temp_file"
    update_python_accounts
    echo -e "${GREEN}‚úÖ Â∑≤Âà†Èô§Ë¥¶Êà∑ÔºÅüéâ${NC}"
    echo -e "${CYAN}üìã ÂΩìÂâç accounts.json ÂÜÖÂÆπÔºö${NC}"
    cat "$CONFIG_FILE"
}

# === Âà†Èô§ÂÖ®ÈÉ®ÁßÅÈí• ===
delete_all_private_keys() {
    validate_points_file
    echo -e "${RED}‚ö†Ô∏è Ë≠¶ÂëäÔºöÂ∞ÜÂà†Èô§ÊâÄÊúâÁßÅÈí•ÔºÅÁªßÁª≠Ôºü(y/n)${NC}"
    read -p "> " confirm
    if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
        echo '[]' > "$CONFIG_FILE"
        if ! jq -e . "$CONFIG_FILE" >/dev/null 2>&1; then
            echo -e "${RED}‚ùó ÈîôËØØÔºöÂÜôÂÖ• $CONFIG_FILE Â§±Ë¥•üò¢${NC}" >&2
            return
        fi
        update_python_accounts
        echo -e "${GREEN}‚úÖ Â∑≤Âà†Èô§ÊâÄÊúâÁßÅÈí•ÔºÅüéâ${NC}"
        echo -e "${CYAN}üìã ÂΩìÂâç accounts.json ÂÜÖÂÆπÔºö${NC}"
        cat "$CONFIG_FILE"
    fi
}

# === Êü•ÁúãÁßÅÈí• ===
view_private_keys() {
    validate_points_file
    accounts=$(read_accounts)
    count=$(echo "$accounts" | jq 'length')
    if [ "$count" -eq 0 ]; then
        echo -e "${RED}‚ùó Ë¥¶Êà∑ÂàóË°®‰∏∫Á©∫ÔºÅüò¢${NC}" >&2
        return
    fi
    echo -e "${CYAN}üìã ÂΩìÂâçË¥¶Êà∑ÂàóË°®Ôºö${NC}"
    i=1
    while IFS= read -r line; do
        name=$(echo "$line" | jq -r '.name')
        key=$(echo "$line" | jq -r '.private_key')
        address=$(echo "$line" | jq -r '.address')
        if [ -z "$address" ]; then
            address=$(python3 -c "from web3 import Web3; print(Web3(Web3.HTTPProvider('https://sepolia.unichain.org')).eth.account.from_key('$key').address)" 2>/dev/null)
        fi
        if [ -n "$name" ] && [ -n "$key" ] && [ -n "$address" ]; then
            op_balance=$(get_account_balance "$address" "OP")
            arb_balance=$(get_account_balance "$address" "ARB")
            uni_balance=$(get_account_balance "$address" "UNI")
            echo "$i. $name (${address:0:10}...${address: -4}) OP: $op_balance ETH, ARB: $arb_balance ETH, UNI: $uni_balance ETH"
            i=$((i + 1))
        fi
    done < <(echo "$accounts" | jq -c '.[]')
    if [ $i -eq 1 ]; then
        echo -e "${RED}‚ùó Ë¥¶Êà∑ÂàóË°®‰∏∫Á©∫ÔºÅüò¢${NC}" >&2
    fi
}

# === ÁÆ°ÁêÜ Telegram IDs ===
manage_telegram() {
    validate_points_file
    while true; do
        set +x
        banner
        cat << EOF
${CYAN}üåê Telegram ID ÁÆ°ÁêÜÔºö${NC}
ËØ∑ÂÖ≥Ê≥® @GetMyIDBot Ëé∑ÂèñÊÇ®ÁöÑ Telegram ID üì¢
1. Ê∑ªÂä† Telegram ID ‚ûï
2. Âà†Èô§ Telegram ID ‚ûñ
3. Êü•Áúã Telegram ID üìã
4. ËøîÂõû üîô
EOF
        read -p "> " sub_choice
        set -x
        case $sub_choice in
            1)
                set +x
                echo -e "${CYAN}üåê ËØ∑ËæìÂÖ• Telegram Áî®Êà∑ IDÔºàÁ∫ØÊï∞Â≠óÔºå‰æãÂ¶Ç 5963704377ÔºâÔºö${NC}"
                echo -e "${CYAN}üì¢ ËØ∑ÂÖàÂÖ≥Ê≥® @GetMyIDBot Ëé∑ÂèñÊÇ®ÁöÑ Telegram IDÔºÅüòé${NC}"
                read -p "> " chat_id
                set -x
                if [[ ! "$chat_id" =~ ^[0-9]+$ ]]; then
                    set +x
                    echo -e "${RED}‚ùó Êó†Êïà IDÔºåÂøÖÈ°ª‰∏∫Á∫ØÊï∞Â≠óÔºÅüò¢${NC}" >&2
                    continue
                fi
                TELEGRAM_CHAT_ID="$chat_id"
                echo "$chat_id" > telegram.conf
                set +x
                echo -e "${GREEN}‚úÖ Â∑≤Ê∑ªÂä† Telegram ID: $chat_id üéâ${NC}"
                ;;
            2)
                set +x
                echo -e "${CYAN}üìã ÂΩìÂâç Telegram IDÔºö${NC}"
                if [ -z "$TELEGRAM_CHAT_ID" ]; then
                    echo "Êó† Telegram ID"
                else
                    echo "1. $TELEGRAM_CHAT_ID"
                fi
                echo -e "${CYAN}üîç ËØ∑ËæìÂÖ•Ë¶ÅÂà†Èô§ÁöÑ ID ÁºñÂè∑ÔºàÊàñ 0 ÂèñÊ∂àÔºâÔºö${NC}"
                read -p "> " index
                set -x
                if [ "$index" -eq 0 ]; then
                    continue
                fi
                TELEGRAM_CHAT_ID=""
                rm -f telegram.conf
                set +x
                echo -e "${GREEN}‚úÖ Â∑≤Âà†Èô§ Telegram IDÔºÅüéâ${NC}"
                ;;
            3)
                set +x
                echo -e "${CYAN}üìã ÂΩìÂâç Telegram IDÔºö${NC}"
                if [ -z "$TELEGRAM_CHAT_ID" ]; then
                    echo "Êó† Telegram ID"
                else
                    echo "1. $TELEGRAM_CHAT_ID"
                fi
                ;;
            4) break ;;
            *)
                set +x
                echo -e "${RED}‚ùó Êó†ÊïàÈÄâÈ°πÔºÅüò¢${NC}" >&2
                ;;
        esac
        set +x
        read -p "ÊåâÂõûËΩ¶ÁªßÁª≠... ‚èé"
        set -x
    done
}

# === ÁÆ°ÁêÜÁßÅÈí• ===
manage_private_keys() {
    validate_points_file
    while true; do
        set +x
        banner
        cat << EOF
${CYAN}üîë ÁßÅÈí•ÁÆ°ÁêÜÔºö${NC}
1. Ê∑ªÂä†ÁßÅÈí• ‚ûï
2. Âà†Èô§ÁßÅÈí• ‚ûñ
3. Êü•ÁúãÁßÅÈí• üìã
4. ËøîÂõû üîô
5. Âà†Èô§ÂÖ®ÈÉ®ÁßÅÈí• üóëÔ∏è
EOF
        read -p "> " sub_choice
        set -x
        case $sub_choice in
            1) add_private_key ;;
            2) delete_private_key ;;
            3) view_private_keys ;;
            4) break ;;
            5) delete_all_private_keys ;;
            *)
                set +x
                echo -e "${RED}‚ùó Êó†ÊïàÈÄâÈ°πÔºÅüò¢${NC}" >&2
                ;;
        esac
        set +x
        read -p "ÊåâÂõûËΩ¶ÁªßÁª≠... ‚èé"
        set -x
    done
}

# === ÂÖÖÂÄºÁÇπÊï∞ ===
recharge_points() {
    validate_points_file
    echo -e "${CYAN}üí∏ ËØ∑ËæìÂÖ•ÂÖÖÂÄºÈáëÈ¢ùÔºàÊï¥Êï∞ ETHÔºåÊúÄÂ∞è 1 ETHÔºå‰æãÂ¶Ç 1ÔºâÔºö${NC}"
    echo -e "${CYAN}üìã ÂÖëÊç¢ËßÑÂàôÔºö1 ETH = 50,000 ÁÇπ${NC}"
    echo -e "${CYAN}üìã ÊäòÊâ£‰ø°ÊÅØÔºàÂü∫‰∫éÁÇπÊï∞ÔºâÔºö${NC}"
    echo "  - 100,000 ÁÇπÔºà2 ETHÔºâÔºö8.5ÊäòÔºà0.85Ôºâ"
    echo "  - 500,000 ÁÇπÔºà10 ETHÔºâÔºö7ÊäòÔºà0.7Ôºâ"
    echo "  - 1,000,000 ÁÇπÔºà20 ETHÔºâÔºö6ÊäòÔºà0.6Ôºâ"
    echo "  - 5,000,000 ÁÇπÔºà100 ETHÔºâÔºö5ÊäòÔºà0.5Ôºâ"
    read -p "> " amount_eth
    if [[ ! "$amount_eth" =~ ^[0-9]+$ ]] || [ "$amount_eth" -lt 1 ]; then
        echo -e "${RED}‚ùó Êó†ÊïàËæìÂÖ•ÔºåÂøÖÈ°ª‰∏∫Ê≠£Êï¥Êï∞‰∏îËá≥Â∞ë 1 ETHÔºÅüò¢${NC}" >&2
        return
    fi
    points=$((amount_eth * 50000))
    discount=1
    if [ "$points" -ge 5000000 ]; then
        discount=0.5
    elif [ "$points" -ge 1000000 ]; then
        discount=0.6
    elif [ "$points" -ge 500000 ]; then
        discount=0.7
    elif [ "$points" -ge 100000 ]; then
        discount=0.85
    fi
    discounted_eth=$(python3 -c "print('{:.6f}'.format($amount_eth * $discount))")
    echo -e "${CYAN}üí∏ Â∞ÜËé∑Âæó $points ÁÇπÔºåÈúÄÊîØ‰ªò $discounted_eth ETHÔºàÊäòÊâ£Ôºö${discount}Ôºâ${NC}"
    accounts=$(read_accounts)
    count=$(echo "$accounts" | jq 'length')
    if [ "$count" -eq 0 ]; then
        echo -e "${RED}‚ùó Ë¥¶Êà∑ÂàóË°®‰∏∫Á©∫ÔºåËØ∑ÂÖàÊ∑ªÂä†ÁßÅÈí•ÔºÅüò¢${NC}" >&2
        return
    fi
    echo -e "${CYAN}üìã ÂΩìÂâçË¥¶Êà∑ÂàóË°®Ôºö${NC}"
    accounts_list=()
    i=1
    while IFS= read -r line; do
        name=$(echo "$line" | jq -r '.name')
        key=$(echo "$line" | jq -r '.private_key')
        address=$(echo "$line" | jq -r '.address')
        if [ -z "$address" ]; then
            address=$(python3 -c "from web3 import Web3; print(Web3(Web3.HTTPProvider('https://sepolia.unichain.org')).eth.account.from_key('$key').address)" 2>/dev/null)
            if [ -z "$address" ]; then
                echo -e "${RED}‚ùó Êó†Ê≥ïËÆ°ÁÆóË¥¶Êà∑ $name ÁöÑÂú∞ÂùÄÔºåË∑≥Ëøáüò¢${NC}" >&2
                continue
            fi
            temp_file=$(mktemp)
            echo "$accounts" > "$temp_file"
            accounts_json=$(echo "$accounts" | jq -c ".[] | select(.private_key == \"$key\") |= . + {\"address\": \"$address\"}")
            echo "$accounts_json" > "$CONFIG_FILE"
            if ! jq -e . "$CONFIG_FILE" >/dev/null 2>&1; then
                echo -e "${RED}‚ùó ÈîôËØØÔºöÂÜôÂÖ• $CONFIG_FILE Â§±Ë¥•ÔºåÊÅ¢Â§çÂéüÂßãÂÜÖÂÆπüò¢${NC}" >&2
                mv "$temp_file" "$CONFIG_FILE"
                rm -f "$temp_file"
                continue
            fi
            rm "$temp_file"
        fi
        if [ -n "$name" ] && [ -n "$key" ] && [ -n "$address" ]; then
            op_balance=$(get_account_balance "$address" "OP")
            arb_balance=$(get_account_balance "$address" "ARB")
            uni_balance=$(get_account_balance "$address" "UNI")
            accounts_list+=("{\"name\": \"$name\", \"private_key\": \"$key\", \"address\": \"$address\"}")
            echo "$i. $name (${address:0:10}...) OP: $op_balance ETH, ARB: $arb_balance ETH, UNI: $uni_balance ETH"
            i=$((i + 1))
        fi
    done < <(echo "$accounts" | jq -c '.[]')
    if [ ${#accounts_list[@]} -eq 0 ]; then
        echo -e "${RED}‚ùó Ë¥¶Êà∑ÂàóË°®‰∏∫Á©∫ÔºÅüò¢${NC}" >&2
        return
    fi
    echo -e "${CYAN}üîç ËØ∑ÈÄâÊã©ÂÖÖÂÄºË¥¶Êà∑ÁºñÂè∑Ôºö${NC}"
    read -p "> " index
    if [ -z "$index" ] || [ "$index" -le 0 ] || [ "$index" -gt "${#accounts_list[@]}" ]; then
        echo -e "${RED}‚ùó Êó†ÊïàÁºñÂè∑ÔºÅüò¢${NC}" >&2
        return
    fi
    account=$(echo "${accounts_list[$((index-1))]}" | jq -r '.private_key')
    address=$(echo "${accounts_list[$((index-1))]}" | jq -r '.address')
    if [ -z "$address" ] || [ "$address" == "null" ]; then
        address=$(python3 -c "from web3 import Web3; print(Web3(Web3.HTTPProvider('https://sepolia.unichain.org')).eth.account.from_key('$account').address)" 2>/dev/null)
        if [ -z "$address" ]; then
            echo -e "${RED}‚ùó Êó†Ê≥ïËÆ°ÁÆóË¥¶Êà∑Âú∞ÂùÄÔºÅüò¢${NC}" >&2
            return
        fi
    fi
    chains=("ARB" "UNI" "OP")
    amount_wei=$(python3 -c "print(int($discounted_eth * 10**18))")
    gas_limit=21000
    max_attempts=3
    for c in "${chains[@]}"; do
        case "$c" in
            "ARB")
                rpc_urls=$(jq -r '.ARB_RPC_URLS[]' "$RPC_CONFIG_FILE")
                chain_id=421614
                ;;
            "UNI")
                rpc_urls=$(jq -r '.UNI_RPC_URLS[]' "$RPC_CONFIG_FILE")
                chain_id=1301
                ;;
            "OP")
                rpc_urls=$(jq -r '.OP_RPC_URLS[]' "$RPC_CONFIG_FILE")
                chain_id=11155420
                ;;
        esac
        for url in $rpc_urls; do
            echo -e "${CYAN}üîç Ê£ÄÊü• $c Èìæ‰ΩôÈ¢ùÔºà‰ΩøÁî® RPC: $urlÔºâ...${NC}"
            temp_script=$(mktemp)
            cat << EOF > "$temp_script"
import sys
from web3 import Web3
rpc_url = "$url"
address = "$address"
amount_eth = $discounted_eth
gas_limit = $gas_limit
try:
    w3 = Web3(Web3.HTTPProvider(rpc_url, request_kwargs={'timeout': 10}))
    if not w3.is_connected():
        print('RPC connection failed', file=sys.stderr)
        sys.exit(1)
    balance_eth = w3.from_wei(w3.eth.get_balance(address), 'ether')
    gas_price = w3.from_wei(w3.eth.gas_price, 'ether')
    total_cost = amount_eth + (gas_price * gas_limit)
    if balance_eth < total_cost:
        print(f'Insufficient balance: {balance_eth} ETH < {total_cost} ETH', file=sys.stderr)
        sys.exit(1)
    print('Sufficient balance')
except Exception as e:
    print(f'Check failed: {str(e)}', file=sys.stderr)
    sys.exit(1)
EOF
            tx_output=$(python3 "$temp_script" 2>&1)
            rm -f "$temp_script"
            if echo "$tx_output" | grep -q "Sufficient balance"; then
                echo -e "${CYAN}üí∏ Â∞Ü‰ªé $c ÈìæËΩ¨Ë¥¶ $discounted_eth ETH Âà∞ $FEE_ADDRESSÔºà‰ΩøÁî® RPC: $urlÔºâ...${NC}"
                for ((attempt=1; attempt<=max_attempts; attempt++)); do
                    temp_script=$(mktemp)
                    cat << EOF > "$temp_script"
import sys
from web3 import Web3
rpc_url = "$url"
account = "$account"
address = "$address"
fee_address = "$FEE_ADDRESS"
amount_wei = $amount_wei
chain_id = $chain_id
gas_limit = $gas_limit
try:
    w3 = Web3(Web3.HTTPProvider(rpc_url, request_kwargs={'timeout': 10}))
    if not w3.is_connected():
        print('RPC connection failed', file=sys.stderr)
        sys.exit(1)
    account = w3.eth.account.from_key(account)
    nonce = w3.eth.get_transaction_count(address)
    gas_price = w3.eth.gas_price
    tx = {
        'to': fee_address,
        'value': int(amount_wei),
        'nonce': nonce,
        'gas': gas_limit,
        'gasPrice': gas_price,
        'chainId': int(chain_id)
    }
    signed_tx = w3.eth.account.sign_transaction(tx, account.key)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction).hex()
    print(tx_hash)
except Exception as e:
    print(f'Transaction failed: {str(e)}', file=sys.stderr)
    sys.exit(1)
EOF
                    tx_output=$(python3 "$temp_script" 2>&1)
                    rm -f "$temp_script"
                    tx_hash=$(echo "$tx_output" | grep -v '^Transaction failed' | grep -E '^[0-9a-fA-Fx]+$')
                    error_message=$(echo "$tx_output" | grep '^Transaction failed' || echo "Unknown error")
                    if [ $? -eq 0 ] && [ -n "$tx_hash" ]; then
                        temp_script=$(mktemp)
                        cat << EOF > "$temp_script"
import sys
from web3 import Web3
rpc_url = "$url"
tx_hash = "$tx_hash"
try:
    w3 = Web3(Web3.HTTPProvider(rpc_url, request_kwargs={'timeout': 10}))
    receipt = w3.eth.wait_for_transaction_receipt(tx_hash, timeout=60)
    print(receipt['status'])
except Exception as e:
    print(f'Waiting for transaction failed: {str(e)}', file=sys.stderr)
    sys.exit(1)
EOF
                        tx_output=$(python3 "$temp_script" 2>&1)
                        rm -f "$temp_script"
                        tx_status=$(echo "$tx_output" | grep -v '^Waiting for transaction failed' | grep -E '^[01]$')
                        error_message=$(echo "$tx_output" | grep '^Waiting for transaction failed' || echo "Unknown error")
                        if [ $? -eq 0 ] && [ -n "$tx_status" ] && [ "$tx_status" -eq 1 ]; then
                            echo -e "${GREEN}‚úÖ ËΩ¨Ë¥¶ÊàêÂäüÔºÅ‰∫§ÊòìÂìàÂ∏åÔºö$tx_hash üéâ${NC}"
                            points_json=$(read_points)
                            current_points=$(echo "$points_json" | jq -r ".\"$address\" // 0")
                            new_points=$((current_points + points))
                            if update_points "$address" "$new_points"; then
                                echo -e "${GREEN}‚úÖ Â∑≤Êõ¥Êñ∞ÁÇπÊï∞Ôºö$new_points ÁÇπ üéâ${NC}"
                                send_telegram_notification "Ë¥¶Êà∑ ${address:0:10}... ÂÖÖÂÄºÊàêÂäüÔºÅ\n‰∫§ÊòìÂìàÂ∏åÔºö$tx_hash\nÂΩìÂâçÁÇπÊï∞Ôºö$new_points"
                            else
                                echo -e "${RED}‚ùó ÁÇπÊï∞Êõ¥Êñ∞Â§±Ë¥•ÔºåËØ∑ËÅîÁ≥ªÁÆ°ÁêÜÂëòÔºÅüò¢${NC}" >&2
                            fi
                            break 2
                        else
                            echo -e "${RED}‚ùó Á≠âÂæÖ‰∫§ÊòìÁ°ÆËÆ§Â§±Ë¥•Ôºö$error_message üò¢${NC}" >&2
                            if [ "$attempt" -lt "$max_attempts" ]; then
                                echo -e "${CYAN}üîÑ ÈáçËØï‰∏≠...Ôºà$attempt/$max_attemptsÔºâ${NC}"
                                sleep 5
                            fi
                        fi
                    else
                        echo -e "${RED}‚ùó ‰∫§ÊòìÂèëÈÄÅÂ§±Ë¥•Ôºö$error_message üò¢${NC}" >&2
                        if [ "$attempt" -lt "$max_attempts" ]; then
                            echo -e "${CYAN}üîÑ ÈáçËØï‰∏≠...Ôºà$attempt/$max_attemptsÔºâ${NC}"
                            sleep 5
                        fi
                    fi
                done
                if [ "$attempt" -gt "$max_attempts" ]; then
                    echo -e "${RED}‚ùó ËææÂà∞ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞ÔºåËΩ¨Ë¥¶Â§±Ë¥•ÔºÅüò¢${NC}" >&2
                    break
                fi
            else
                echo -e "${RED}‚ùó ‰ΩôÈ¢ù‰∏çË∂≥Ôºö$tx_output üò¢${NC}" >&2
            fi
        done
    done
}

# === ÁÆ°ÁêÜ RPC ===
manage_rpc() {
    validate_points_file
    while true; do
        set +x
        banner
        cat << EOF
${CYAN}‚öôÔ∏è RPC ÁÆ°ÁêÜÔºö${NC}
1. Êü•ÁúãÂΩìÂâç RPC üìã
2. ‰øÆÊîπ RPC ‚öôÔ∏è
3. ËøîÂõû üîô
EOF
        read -p "> " sub_choice
        set -x
        case $sub_choice in
            1) view_rpc_config ;;
            2) modify_rpc ;;
            3) break ;;
            *)
                set +x
                echo -e "${RED}‚ùó Êó†ÊïàÈÄâÈ°πÔºÅüò¢${NC}" >&2
                ;;
        esac
        set +x
        read -p "ÊåâÂõûËΩ¶ÁªßÁª≠... ‚èé"
        set -x
    done
}

# === Êü•ÁúãÂΩìÂâç RPC ===
view_rpc_config() {
    validate_points_file
    rpc_config=$(read_rpc_config)
    echo -e "${CYAN}üìã ÂΩìÂâç RPC ÈÖçÁΩÆÔºö${NC}"
    echo "$rpc_config" | jq '.'
}

# === ‰øÆÊîπ RPC ===
modify_rpc() {
    validate_points_file
    echo -e "${CYAN}‚öôÔ∏è ËØ∑ÈÄâÊã©Ë¶Å‰øÆÊîπÁöÑ RPCÔºö${NC}"
    echo "1. ARB RPC"
    echo "2. UNI RPC"
    echo "3. OP RPC"
    read -p "> " rpc_choice
    case $rpc_choice in
        1)
            echo -e "${CYAN}üìù ËØ∑ËæìÂÖ•Êñ∞ÁöÑ ARB RPC URLsÔºàÂ§ö‰∏™Áî®ÈÄóÂè∑ÂàÜÈöîÔºâÔºö${NC}"
            read -p "> " rpc_urls
            rpc_config=$(read_rpc_config)
            temp_file=$(mktemp)
            echo "$rpc_config" > "$temp_file"
            new_config=$(echo "$rpc_config" | jq -c ".ARB_RPC_URLS = [\"${rpc_urls//,/\",\"}\"]")
            echo "$new_config" > "$RPC_CONFIG_FILE"
            if ! jq -e . "$RPC_CONFIG_FILE" >/dev/null 2>&1; then
                echo -e "${RED}‚ùó ÈîôËØØÔºöÂÜôÂÖ• $RPC_CONFIG_FILE Â§±Ë¥•ÔºåÊÅ¢Â§çÂéüÂßãÂÜÖÂÆπüò¢${NC}" >&2
                mv "$temp_file" "$RPC_CONFIG_FILE"
                rm "$temp_file"
                return
            fi
            rm "$temp_file"
            echo -e "${GREEN}‚úÖ Â∑≤Êõ¥Êñ∞ ARB RPC URLsÔºÅüéâ${NC}"
            ;;
        2)
            echo -e "${CYAN}üìù ËØ∑ËæìÂÖ•Êñ∞ÁöÑ UNI RPC URLsÔºàÂ§ö‰∏™Áî®ÈÄóÂè∑ÂàÜÈöîÔºâÔºö${NC}"
            read -p "> " rpc_urls
            rpc_config=$(read_rpc_config)
            temp_file=$(mktemp)
            echo "$rpc_config" > "$temp_file"
            new_config=$(echo "$rpc_config" | jq -c ".UNI_RPC_URLS = [\"${rpc_urls//,/\",\"}\"]")
            echo "$new_config" > "$RPC_CONFIG_FILE"
            if ! jq -e . "$RPC_CONFIG_FILE" >/dev/null 2>&1; then
                echo -e "${RED}‚ùó ÈîôËØØÔºöÂÜôÂÖ• $RPC_CONFIG_FILE Â§±Ë¥•ÔºåÊÅ¢Â§çÂéüÂßãÂÜÖÂÆπüò¢${NC}" >&2
                mv "$temp_file" "$RPC_CONFIG_FILE"
                rm "$temp_file"
                return
            fi
            rm "$temp_file"
            echo -e "${GREEN}‚úÖ Â∑≤Êõ¥Êñ∞ UNI RPC URLsÔºÅüéâ${NC}"
            ;;
        3)
            echo -e "${CYAN}üìù ËØ∑ËæìÂÖ•Êñ∞ÁöÑ OP RPC URLsÔºàÂ§ö‰∏™Áî®ÈÄóÂè∑ÂàÜÈöîÔºâÔºö${NC}"
            read -p "> " rpc_urls
            rpc_config=$(read_rpc_config)
            temp_file=$(mktemp)
            echo "$rpc_config" > "$temp_file"
            new_config=$(echo "$rpc_config" | jq -c ".OP_RPC_URLS = [\"${rpc_urls//,/\",\"}\"]")
            echo "$new_config" > "$RPC_CONFIG_FILE"
            if ! jq -e . "$RPC_CONFIG_FILE" >/dev/null 2>&1; then
                echo -e "${RED}‚ùó ÈîôËØØÔºöÂÜôÂÖ• $RPC_CONFIG_FILE Â§±Ë¥•ÔºåÊÅ¢Â§çÂéüÂßãÂÜÖÂÆπüò¢${NC}" >&2
                mv "$temp_file" "$RPC_CONFIG_FILE"
                rm "$temp_file"
                return
            fi
            rm "$temp_file"
            echo -e "${GREEN}‚úÖ Â∑≤Êõ¥Êñ∞ OP RPC URLsÔºÅüéâ${NC}"
            ;;
        *)
            echo -e "${RED}‚ùó Êó†ÊïàÈÄâÈ°πÔºÅüò¢${NC}" >&2
            ;;
    esac
}

# === Êü•ÁúãÂΩìÂâçÈÄüÂ∫¶ ===
view_speed_config() {
    validate_points_file
    config=$(read_config)
    request_interval=$(echo "$config" | jq -r '.REQUEST_INTERVAL')
    echo -e "${CYAN}‚è±Ô∏è ÂΩìÂâçÈÄüÂ∫¶ÈÖçÁΩÆÔºö${NC}"
    echo "REQUEST_INTERVAL: $request_interval Áßí"
}

# === ‰øÆÊîπÈÄüÂ∫¶ ===
modify_speed() {
    validate_points_file
    echo -e "${CYAN}‚è±Ô∏è ËØ∑ËæìÂÖ•Êñ∞ÁöÑ REQUEST_INTERVALÔºàÊ≠£ÊµÆÁÇπÊï∞ÔºåÂçï‰ΩçÔºöÁßíÔºå‰æãÂ¶Ç 0.01ÔºâÔºö${NC}"
    read -p "> " request_interval
    if [[ ! "$request_interval" =~ ^[0-9]+(\.[0-9]+)?$ ]] || [ "$(echo "$request_interval <= 0" | bc)" -eq 1 ]; then
        echo -e "${RED}‚ùó Êó†ÊïàËæìÂÖ•ÔºåÂøÖÈ°ª‰∏∫Ê≠£ÊµÆÁÇπÊï∞ÔºÅüò¢${NC}" >&2
        return
    fi
    config=$(read_config)
    temp_file=$(mktemp)
    echo "$config" > "$temp_file"
    new_config=$(echo "$config" | jq -c ".REQUEST_INTERVAL = $request_interval")
    echo "$new_config" > "$CONFIG_JSON"
    if ! jq -e . "$CONFIG_JSON" >/dev/null 2>&1; then
        echo -e "${RED}‚ùó ÈîôËØØÔºöÂÜôÂÖ• $CONFIG_JSON Â§±Ë¥•ÔºåÊÅ¢Â§çÂéüÂßãÂÜÖÂÆπüò¢${NC}" >&2
        mv "$temp_file" "$CONFIG_JSON"
        rm "$temp_file"
        return
    fi
    rm "$temp_file"
    update_python_config
    echo -e "${GREEN}‚úÖ Â∑≤Êõ¥Êñ∞ REQUEST_INTERVAL ‰∏∫ $request_interval ÁßíÔºÅüéâ${NC}"
}

# === ÈÄüÂ∫¶ÁÆ°ÁêÜ ===
manage_speed() {
    validate_points_file
    while true; do
        set +x
        banner
        cat << EOF
${CYAN}‚è±Ô∏è ÈÄüÂ∫¶ÁÆ°ÁêÜÔºö${NC}
1. Êü•ÁúãÂΩìÂâçÈÄüÂ∫¶ üìã
2. ‰øÆÊîπÈÄüÂ∫¶ ‚è±Ô∏è
3. ËøîÂõû üîô
EOF
        read -p "> " sub_choice
        set -x
        case $sub_choice in
            1) view_speed_config ;;
            2) modify_speed ;;
            3) break ;;
            *)
                set +x
                echo -e "${RED}‚ùó Êó†ÊïàÈÄâÈ°πÔºÅüò¢${NC}" >&2
                ;;
        esac
        set +x
        read -p "ÊåâÂõûËΩ¶ÁªßÁª≠... ‚èé"
        set -x
    done
}

# === Êõ¥Êñ∞ Python ËÑöÊú¨ÈÖçÁΩÆÔºàREQUEST_INTERVAL, AMOUNT_ETH, DATA_TEMPLATEÔºâ ===
update_python_config() {
    validate_points_file
    config=$(read_config)
    request_interval=$(echo "$config" | jq -r '.REQUEST_INTERVAL')
    amount_eth=$(echo "$config" | jq -r '.AMOUNT_ETH')
    uni_to_arb_data=$(echo "$config" | jq -r '.UNI_TO_ARB_DATA_TEMPLATE' | sed "s/'/\\'/g")
    arb_to_uni_data=$(echo "$config" | jq -r '.ARB_TO_UNI_DATA_TEMPLATE' | sed "s/'/\\'/g")
    op_data=$(echo "$config" | jq -r '.OP_DATA_TEMPLATE' | sed "s/'/\\'/g")
    uni_data=$(echo "$config" | jq -r '.UNI_DATA_TEMPLATE' | sed "s/'/\\'/g")
    for script in "$ARB_SCRIPT" "$OP_SCRIPT"; do
        if [ ! -f "$script" ]; then
            echo -e "${RED}‚ùó ÈîôËØØÔºö$script ‰∏çÂ≠òÂú®üò¢${NC}" >&2
            return
        fi
        if [ ! -w "$script" ]; then
            echo -e "${RED}‚ùó ÈîôËØØÔºö$script ‰∏çÂèØÂÜôüò¢${NC}" >&2
            return
        fi
    done
    sed -i "s|^REQUEST_INTERVAL = .*|REQUEST_INTERVAL = $request_interval|" "$ARB_SCRIPT"
    sed -i "s|^AMOUNT_ETH = .*|AMOUNT_ETH = $amount_eth|" "$ARB_SCRIPT"
    sed -i "s|^UNI_TO_ARB_DATA_TEMPLATE = .*|UNI_TO_ARB_DATA_TEMPLATE = '$uni_to_arb_data'|" "$ARB_SCRIPT"
    sed -i "s|^ARB_TO_UNI_DATA_TEMPLATE = .*|ARB_TO_UNI_DATA_TEMPLATE = '$arb_to_uni_data'|" "$ARB_SCRIPT"
    sed -i "s|^REQUEST_INTERVAL = .*|REQUEST_INTERVAL = $request_interval|" "$OP_SCRIPT"
    sed -i "s|^AMOUNT_ETH = .*|AMOUNT_ETH = $amount_eth|" "$OP_SCRIPT"
    sed -i "s|^OP_DATA_TEMPLATE = .*|OP_DATA_TEMPLATE = '$op_data'|" "$OP_SCRIPT"
    sed -i "s|^UNI_DATA_TEMPLATE = .*|UNI_DATA_TEMPLATE = '$uni_data'|" "$OP_SCRIPT"
    echo -e "${GREEN}‚úÖ Â∑≤Êõ¥Êñ∞ $ARB_SCRIPT Âíå $OP_SCRIPT ÁöÑÈÖçÁΩÆÔºÅüéâ${NC}"
    echo -e "${CYAN}üìã ÂΩìÂâç $ARB_SCRIPT ÈÖçÁΩÆÔºö${NC}"
    grep "^REQUEST_INTERVAL =" "$ARB_SCRIPT"
    grep "^AMOUNT_ETH =" "$ARB_SCRIPT"
    grep "^UNI_TO_ARB_DATA_TEMPLATE =" "$ARB_SCRIPT"
    grep "^ARB_TO_UNI_DATA_TEMPLATE =" "$ARB_SCRIPT"
    echo -e "${CYAN}üìã ÂΩìÂâç $OP_SCRIPT ÈÖçÁΩÆÔºö${NC}"
    grep "^REQUEST_INTERVAL =" "$OP_SCRIPT"
    grep "^AMOUNT_ETH =" "$OP_SCRIPT"
    grep "^OP_DATA_TEMPLATE =" "$OP_SCRIPT"
    grep "^UNI_DATA_TEMPLATE =" "$OP_SCRIPT"
}

# === Êõ¥Êñ∞ Python ËÑöÊú¨Ë¥¶Êà∑ ===
update_python_accounts() {
    validate_points_file
    accounts=$(read_accounts)
    accounts_str=$(echo "$accounts" | jq -r '[.[] | {"private_key": .private_key, "name": .name}]' | jq -r '@json')
    if [ -z "$accounts_str" ] || [ "$accounts_str" == "[]" ]; then
        accounts_str="[]"
        echo -e "${RED}‚ùó Ë≠¶ÂëäÔºöË¥¶Êà∑ÂàóË°®‰∏∫Á©∫ÔºåÂ∞ÜËÆæÁΩÆ ACCOUNTS ‰∏∫Á©∫üò¢${NC}" >&2
    fi
    for script in "$ARB_SCRIPT" "$OP_SCRIPT"; do
        if [ ! -f "$script" ]; then
            echo -e "${RED}‚ùó ÈîôËØØÔºö$script ‰∏çÂ≠òÂú®üò¢${NC}" >&2
            return 1
        fi
        if [ ! -w "$script" ]; then
            echo -e "${RED}‚ùó ÈîôËØØÔºö$script ‰∏çÂèØÂÜôÔºåËØ∑Ê£ÄÊü•ÊùÉÈôêüò¢${NC}" >&2
            return 1
        fi
        temp_file=$(mktemp)
        cp "$script" "$temp_file" || {
            echo -e "${RED}‚ùó ÈîôËØØÔºöÊó†Ê≥ïÂ§á‰ªΩ $scriptüò¢${NC}" >&2
            rm -f "$temp_file"
            return 1
        }
        if grep -q "^ACCOUNTS = " "$script"; then
            sed "s|^ACCOUNTS = .*|ACCOUNTS = $accounts_str|" "$script" > "$script.tmp" || {
                echo -e "${RED}‚ùó ÈîôËØØÔºöÊõ¥Êñ∞ $script Â§±Ë¥•üò¢${NC}" >&2
                mv "$temp_file" "$script"
                rm -f "$script.tmp"
                return 1
            }
        else
            echo "ACCOUNTS = $accounts_str" > "$script.tmp"
            cat "$script" >> "$script.tmp" || {
                echo -e "${RED}‚ùó ÈîôËØØÔºöËøΩÂä† $script Â§±Ë¥•üò¢${NC}" >&2
                mv "$temp_file" "$script"
                rm -f "$script.tmp"
                return 1
            }
        fi
        mv "$script.tmp" "$script" || {
            echo -e "${RED}‚ùó ÈîôËØØÔºöÁßªÂä®‰∏¥Êó∂Êñá‰ª∂Âà∞ $script Â§±Ë¥•üò¢${NC}" >&2
            mv "$temp_file" "$script"
            return 1
        }
        current_accounts=$(grep "^ACCOUNTS = " "$script" | sed 's/ACCOUNTS = //')
        normalized_accounts_str=$(echo "$accounts_str" | tr -d ' \n')
        normalized_current_accounts=$(echo "$current_accounts" | tr -d ' \n')
        if [ "$normalized_current_accounts" != "$normalized_accounts_str" ]; then
            echo -e "${RED}‚ùó ÈîôËØØÔºöÈ™åËØÅ $script Êõ¥Êñ∞Â§±Ë¥•ÔºåÂÜÖÂÆπ‰∏çÂåπÈÖçüò¢${NC}" >&2
            echo -e "${CYAN}È¢ÑÊúüÂÜÖÂÆπÔºö$accounts_str${NC}"
            echo -e "${CYAN}ÂÆûÈôÖÂÜÖÂÆπÔºö$current_accounts${NC}"
            mv "$temp_file" "$script"
            rm -f "$temp_file"
            return 1
        fi
        rm -f "$temp_file"
    done
    echo -e "${GREEN}‚úÖ Â∑≤Êõ¥Êñ∞ $ARB_SCRIPT Âíå $OP_SCRIPT ÁöÑË¥¶Êà∑ÔºÅüéâ${NC}"
    echo -e "${CYAN}üìã ÂΩìÂâç $ARB_SCRIPT ACCOUNTS ÂÜÖÂÆπÔºö${NC}"
    grep "^ACCOUNTS = " "$ARB_SCRIPT" || echo "ACCOUNTS Êú™ÂÆö‰πâ"
    echo -e "${CYAN}üìã ÂΩìÂâç $OP_SCRIPT ACCOUNTS ÂÜÖÂÆπÔºö${NC}"
    grep "^ACCOUNTS = " "$OP_SCRIPT" || echo "ACCOUNTS Êú™ÂÆö‰πâ"
}

# === ÈÖçÁΩÆË∑®ÈìæÊñπÂêë ===
select_direction() {
    validate_points_file
    echo -e "${CYAN}üåâ ËØ∑ÈÄâÊã©Ë∑®ÈìæÊñπÂêëÔºö${NC}"
    echo "1. ARB -> UNI üåü"
    echo "2. OP <-> UNI üåü"
    read -p "> " choice
    case $choice in
        1)
            echo "arb_to_uni" > "$DIRECTION_FILE"
            echo -e "${GREEN}‚úÖ ËÆæÁΩÆ‰∏∫ ARB -> UNI üéâ${NC}"
            ;;
        2)
            echo "op_to_uni" > "$DIRECTION_FILE"
            echo -e "${GREEN}‚úÖ ËÆæÁΩÆ‰∏∫ OP <-> UNI üéâ${NC}"
            ;;
        *)
            echo -e "${RED}‚ùó Êó†ÊïàÈÄâÈ°πÔºåÈªòËÆ§ ARB -> UNIüò¢${NC}" >&2
            echo "arb_to_uni" > "$DIRECTION_FILE"
            ;;
    esac
}

# === Êü•ÁúãÊó•Âøó ===
view_logs() {
    validate_points_file
    echo -e "${CYAN}üìú Ê≠£Âú®Ëé∑ÂèñÊó•Âøó...${NC}"
    
    # Ê£ÄÊü•ÊòØÂê¶ÊúâËøõÁ®ãÂú®ËøêË°å
    if ! pm2 show "$PM2_PROCESS_NAME" >/dev/null 2>&1 && ! pm2 show "$PM2_BALANCE_NAME" >/dev/null 2>&1; then
        echo -e "${RED}‚ùó Ê≤°ÊúâËøêË°å‰∏≠ÁöÑËÑöÊú¨ÔºÅüò¢${NC}" >&2
        return 1
    fi
    
    # ÊòæÁ§∫Êó•Âøó
    echo -e "${CYAN}üìã ÊúÄËøë 50 Ë°åÊó•ÂøóÔºö${NC}"
    pm2 logs --lines 50 --nostream
    
    echo -e "${CYAN}üí° ÊèêÁ§∫Ôºö‰ΩøÁî® pm2 logs ÂëΩ‰ª§ÂèØ‰ª•ÂÆûÊó∂Êü•ÁúãÊó•Âøó${NC}"
    read -p "ÊåâÂõûËΩ¶ÁªßÁª≠... ‚èé"
}

# === ÂÅúÊ≠¢ËøêË°å ===
stop_running() {
    validate_points_file
    echo -e "${CYAN}üõë Ê≠£Âú®ÂÅúÊ≠¢ÊâÄÊúâËÑöÊú¨...${NC}"
    
    # ÂÅúÊ≠¢Âπ∂Âà†Èô§ PM2 ËøõÁ®ã
    pm2 stop "$PM2_PROCESS_NAME" "$PM2_BALANCE_NAME" >/dev/null 2>&1
    pm2 delete "$PM2_PROCESS_NAME" "$PM2_BALANCE_NAME" >/dev/null 2>&1
    
    # Ê£ÄÊü•ÊòØÂê¶ËøòÊúâÁõ∏ÂÖ≥ËøõÁ®ãÂú®ËøêË°å
    if pm2 show "$PM2_PROCESS_NAME" >/dev/null 2>&1 || pm2 show "$PM2_BALANCE_NAME" >/dev/null 2>&1; then
        echo -e "${RED}‚ùó Ë≠¶ÂëäÔºöÊüê‰∫õËøõÁ®ãÂèØËÉΩÊú™ÂÆåÂÖ®ÂÅúÊ≠¢üò¢${NC}" >&2
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ ÊâÄÊúâËÑöÊú¨Â∑≤ÂÅúÊ≠¢ÔºÅüéâ${NC}"
}

# === Âà†Èô§ËÑöÊú¨ ===
delete_script() {
    validate_points_file
    echo -e "${RED}‚ö†Ô∏è Ë≠¶ÂëäÔºöÂ∞ÜÂà†Èô§ÊâÄÊúâËÑöÊú¨ÂíåÈÖçÁΩÆÔºÅÁªßÁª≠Ôºü(y/n)${NC}"
    read -p "> " confirm
    if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
        pm2 stop "$PM2_PROCESS_NAME" "$PM2_BALANCE_NAME" >/dev/null 2>&1
        pm2 delete "$PM2_PROCESS_NAME" "$PM2_BALANCE_NAME" >/dev/null 2>&1

        rm -f "$ARB_SCRIPT" "$OP_SCRIPT" "$BALANCE_SCRIPT" "$CONFIG_FILE" "$DIRECTION_FILE" "$RPC_CONFIG_FILE" "$CONFIG_JSON" "$POINTS_JSON" "$POINTS_HASH_FILE"
        echo -e "${GREEN}‚úÖ Â∑≤Âà†Èô§ÊâÄÊúâËÑöÊú¨ÂíåÈÖçÁΩÆÔºÅüéâ${NC}"
    fi
}

# === ÂºÄÂßãËøêË°å ===
start_running() {
    validate_points_file
    
    # Ê£ÄÊü•ÂøÖË¶ÅÁöÑÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
    for script in "$ARB_SCRIPT" "$OP_SCRIPT" "$BALANCE_SCRIPT"; do
        if [ ! -f "$script" ]; then
            echo -e "${RED}‚ùó ÈîôËØØÔºö$script ‰∏çÂ≠òÂú®ÔºÅËØ∑ÂÖà‰∏ãËΩΩËÑöÊú¨üò¢${NC}" >&2
            return 1
        fi
    done

    # Ê£ÄÊü•ËôöÊãüÁéØÂ¢É
    VENV_PATH="/root/bridge-bot-venv"
    if [ ! -d "$VENV_PATH" ]; then
        echo -e "${RED}‚ùó ÈîôËØØÔºöËôöÊãüÁéØÂ¢É‰∏çÂ≠òÂú®ÔºÅËØ∑ÈáçÊñ∞ËøêË°åÂÆâË£Öüò¢${NC}" >&2
        return 1
    fi

    # Ê£ÄÊü•Ë¥¶Êà∑ÈÖçÁΩÆ
    accounts=$(read_accounts)
    if [ "$(echo "$accounts" | jq 'length')" -eq 0 ]; then
        echo -e "${RED}‚ùó ÈîôËØØÔºöÊú™ÈÖçÁΩÆ‰ªª‰ΩïË¥¶Êà∑ÔºÅËØ∑ÂÖàÊ∑ªÂä†ÁßÅÈí•üò¢${NC}" >&2
        return 1
    fi

    # ÂÅúÊ≠¢Áé∞ÊúâËøõÁ®ã
    echo -e "${CYAN}üõë ÂÅúÊ≠¢Áé∞ÊúâËøõÁ®ã...${NC}"
    pm2 stop "$PM2_PROCESS_NAME" "$PM2_BALANCE_NAME" >/dev/null 2>&1
    pm2 delete "$PM2_PROCESS_NAME" "$PM2_BALANCE_NAME" >/dev/null 2>&1

    # Ëé∑ÂèñË∑®ÈìæÊñπÂêë
    direction=$(cat "$DIRECTION_FILE" 2>/dev/null || echo "arb_to_uni")
    
    # ÂêØÂä®‰∏ªËÑöÊú¨
    if [ "$direction" = "arb_to_uni" ]; then
        echo -e "${CYAN}üöÄ Ê≠£Âú®ÂêØÂä® ARB -> UNI Ë∑®ÈìæËÑöÊú¨...${NC}"
        pm2 start "$ARB_SCRIPT" \
            --name "$PM2_PROCESS_NAME" \
            --interpreter "$VENV_PATH/bin/python3" \
            --time \
            --no-autorestart \
            || {
                echo -e "${RED}‚ùó ARB -> UNI ËÑöÊú¨ÂêØÂä®Â§±Ë¥•ÔºÅüò¢${NC}" >&2
                return 1
            }
    else
        echo -e "${CYAN}üöÄ Ê≠£Âú®ÂêØÂä® OP <-> UNI Ë∑®ÈìæËÑöÊú¨...${NC}"
        pm2 start "$OP_SCRIPT" \
            --name "$PM2_PROCESS_NAME" \
            --interpreter "$VENV_PATH/bin/python3" \
            --time \
            --no-autorestart \
            || {
                echo -e "${RED}‚ùó OP <-> UNI ËÑöÊú¨ÂêØÂä®Â§±Ë¥•ÔºÅüò¢${NC}" >&2
                return 1
            }
    fi
    
    # ÂêØÂä®‰ΩôÈ¢ùÊü•ËØ¢ËÑöÊú¨
    echo -e "${CYAN}üöÄ Ê≠£Âú®ÂêØÂä®‰ΩôÈ¢ùÊü•ËØ¢ËÑöÊú¨...${NC}"
    pm2 start "$BALANCE_SCRIPT" \
        --name "$PM2_BALANCE_NAME" \
        --interpreter "$VENV_PATH/bin/python3" \
        --time \
        --no-autorestart \
        || {
            echo -e "${RED}‚ùó ‰ΩôÈ¢ùÊü•ËØ¢ËÑöÊú¨ÂêØÂä®Â§±Ë¥•ÔºÅüò¢${NC}" >&2
            pm2 stop "$PM2_PROCESS_NAME" >/dev/null 2>&1
            pm2 delete "$PM2_PROCESS_NAME" >/dev/null 2>&1
            return 1
        }

    # Ê£ÄÊü•ËøõÁ®ãÁä∂ÊÄÅ
    sleep 2
    if ! pm2 show "$PM2_PROCESS_NAME" >/dev/null 2>&1 || ! pm2 show "$PM2_BALANCE_NAME" >/dev/null 2>&1; then
        echo -e "${RED}‚ùó ËÑöÊú¨ÂêØÂä®Â§±Ë¥•ÔºÅËØ∑Ê£ÄÊü•Êó•Âøóüò¢${NC}" >&2
        return 1
    fi

    echo -e "${GREEN}‚úÖ ÊâÄÊúâËÑöÊú¨Â∑≤ÊàêÂäüÂêØÂä®ÔºÅüéâ${NC}"
    echo -e "${CYAN}üí° ÊèêÁ§∫Ôºö‰ΩøÁî® 'Êü•ÁúãÊó•Âøó' ÈÄâÈ°πÂèØ‰ª•Êü•ÁúãËøêË°åÁä∂ÊÄÅ${NC}"
}

# === ‰∏ªËèúÂçï ===
main_menu() {
    while true; do
        # ÂÖ≥Èó≠ÂëΩ‰ª§ÂõûÊòæ
        set +x
        banner
        cat << EOF
${CYAN}üîß ‰∏ªËèúÂçïÔºö${NC}
1. ÁÆ°ÁêÜÁßÅÈí• üîë
2. ÁÆ°ÁêÜ RPC ‚öôÔ∏è
3. ÁÆ°ÁêÜÈÄüÂ∫¶ ‚è±Ô∏è
4. ÁÆ°ÁêÜ Telegram üåê
5. ÈÄâÊã©Ë∑®ÈìæÊñπÂêë üåâ
6. ÂºÄÂßãËøêË°å üöÄ
7. ÂÅúÊ≠¢ËøêË°å üõë
8. Êü•ÁúãÊó•Âøó üìú
9. ÂÖÖÂÄºÁÇπÊï∞ üí∞
10. Âà†Èô§ËÑöÊú¨ üóëÔ∏è
0. ÈÄÄÂá∫ üëã
EOF
        read -p "> " choice
        # ÈáçÊñ∞ÂêØÁî®ÂëΩ‰ª§ÂõûÊòæÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
        set -x
        case $choice in
            1) manage_private_keys ;;
            2) manage_rpc ;;
            3) manage_speed ;;
            4) manage_telegram ;;
            5) select_direction ;;
            6) start_running ;;
            7) stop_running ;;
            8) view_logs ;;
            9) recharge_points ;;
            10) delete_script ;;
            0) 
                set +x
                echo -e "${GREEN}üëã ÊÑüË∞¢‰ΩøÁî®ÔºåÂÜçËßÅÔºÅ${NC}"
                exit 0
                ;;
            *)
                set +x
                echo -e "${RED}‚ùó Êó†ÊïàÈÄâÈ°πÔºÅüò¢${NC}" >&2
                ;;
        esac
    done
}

# === ‰∏ªÂáΩÊï∞ ===
main() {
    # Ê£ÄÊü• root ÊùÉÈôê
    check_root

    # ÂàùÂßãÂåñÈÖçÁΩÆ
    init_config

    # ÂÆâË£Ö‰æùËµñ
    install_dependencies

    # ‰∏ãËΩΩ Python ËÑöÊú¨
    download_python_scripts

    # ÂêØÂä®‰∏ªËèúÂçï
    main_menu
}

# ÂêØÂä®‰∏ªÂáΩÊï∞ÔºàÂêØÁî®Ë∞ÉËØïÊ®°ÂºèÔºå‰ΩÜÂú®ÊòæÁ§∫ËèúÂçïÊó∂ÂÖ≥Èó≠Ôºâ
set -x
main "$@"
